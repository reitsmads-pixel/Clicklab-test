<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Seating Plan Generator - Exam Roster</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Firebase -->
    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
        import { getAuth, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
        import { getFirestore, doc, setDoc, getDoc } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';

        const firebaseConfig = {
            apiKey: "AIzaSyDk0WZdFVImwinLFNYj8SSghLcxC_SDAp8",
            authDomain: "edu-clicklab.firebaseapp.com",
            projectId: "edu-clicklab",
            storageBucket: "edu-clicklab.firebasestorage.app",
            messagingSenderId: "1029624910209",
            appId: "1:1029624910209:web:20a3b9664fca69b7b21880",
            measurementId: "G-6DMZ7QTWGM"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Make Firebase available globally FIRST
        window.firebaseAuth = auth;
        window.firebaseDb = db;
        window.firebaseReady = false;
        window.currentFirebaseUser = null;

        // Check if user is authenticated
        onAuthStateChanged(auth, (user) => {
            if (!user) {
                window.location.href = 'index.html';
            } else {
                window.currentFirebaseUser = user;
                window.firebaseReady = true;
                // Dispatch event to notify page
                window.dispatchEvent(new CustomEvent('firebaseReady'));
                console.log('✅ Firebase authenticated and ready');
            }
        });

        // Save data to Firestore
        window.saveToFirebase = async function(collectionName, data) {
            const user = auth.currentUser || window.currentFirebaseUser;
            if (!user) {
                console.log('⏳ Waiting for user authentication...');
                return false;
            }

            try {
                await setDoc(doc(db, collectionName, user.uid), {
                    data: data,
                    lastUpdated: new Date().toISOString()
                });
                console.log('✅ Data saved to Firebase successfully');
                return true;
            } catch (error) {
                console.error('❌ Error saving to Firebase:', error);
                return false;
            }
        };

        // Load data from Firestore
        window.loadFromFirebase = async function(collectionName) {
            const user = auth.currentUser || window.currentFirebaseUser;
            if (!user) {
                console.log('⏳ Waiting for user authentication...');
                return null;
            }

            try {
                const docRef = doc(db, collectionName, user.uid);
                const docSnap = await getDoc(docRef);

                if (docSnap.exists()) {
                    console.log('✅ Data loaded from Firebase successfully');
                    return docSnap.data().data;
                } else {
                    console.log('ℹ️ No saved data found in Firebase');
                    return null;
                }
            } catch (error) {
                console.error('Error loading from Firebase:', error);
                return null;
            }
        };
    </script>
    <style>
        /* Exam Roster Design System */
        :root {
            --aqua-teal: #667eea;
            --deep-black: #000000;
            --frost-silver: #D1D3D4;
            --pure-white: #FFFFFF;
            --amber: #FFC107;
            --light-gray: #F5F5F5;
            --dark-gray: #666666;
            --border-color: #E0E0E0;
            --danger-red: #e74c3c;
            --success-green: #27ae60;
            
            /* Grade/Group Colors */
            --color-1: #FF6B6B;  /* Red */
            --color-2: #4ECDC4;  /* Teal */
            --color-3: #45B7D1;  /* Blue */
            --color-4: #FFA07A;  /* Light Salmon */
            --color-5: #98D8C8;  /* Mint */
            --color-6: #F7DC6F;  /* Yellow */
            --color-7: #BB8FCE;  /* Purple */
            --color-8: #85C1E2;  /* Sky Blue */
            --color-9: #F8B739;  /* Orange */
            --color-10: #52B788; /* Green */
            --color-11: #E07A5F; /* Coral */
            --color-12: #81B29A; /* Sage */
            --color-13: #F2CC8F; /* Peach */
            --color-14: #E63946; /* Crimson */
            --color-15: #A8DADC; /* Powder Blue */
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--deep-black);
            line-height: 1.6;
            min-height: 100vh;
        }

        /* Header */
        .app-header {
            background: linear-gradient(135deg, var(--aqua-teal) 0%, #764ba2 100%);
            color: var(--pure-white);
            padding: 1.5rem 2rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-content h1 {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .subtitle {
            font-size: 0.9rem;
            opacity: 0.9;
            font-weight: 300;
        }

        .btn-home {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 0.6rem 1.2rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s;
        }

        .btn-home:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .header-right {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 0.5rem;
        }

        .user-badge {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        /* Logo Styles */
        .header-logo {
            height: 300px;
            width: auto;
            display: block;
            margin-bottom: 0.5rem;
        }

        /* Session Manager Bar - NEW */
        .session-manager-bar {
            background: var(--pure-white);
            border-bottom: 2px solid var(--border-color);
            padding: 1rem 2rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .session-manager-bar label {
            font-weight: 500;
            color: var(--deep-black);
        }

        .session-tabs {
            display: flex;
            gap: 0.5rem;
            flex: 1;
            overflow-x: auto;
            padding: 0.25rem 0;
        }

        .session-tab {
            background: var(--light-gray);
            border: 2px solid var(--border-color);
            border-radius: 8px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            white-space: nowrap;
            transition: all 0.2s;
            min-width: 150px;
        }

        .session-tab:hover {
            background: var(--frost-silver);
        }

        .session-tab.active {
            background: var(--aqua-teal);
            color: var(--pure-white);
            border-color: var(--aqua-teal);
        }

        .session-tab-name {
            flex: 1;
            font-weight: 500;
            display: flex;
            flex-direction: column;
            gap: 0.15rem;
        }

        .session-tab-date {
            font-size: 0.75rem;
            opacity: 0.8;
            font-weight: 400;
        }

        .session-tab-delete {
            background: transparent;
            border: none;
            color: inherit;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            opacity: 0.7;
            transition: opacity 0.2s;
        }

        .session-tab-delete:hover {
            opacity: 1;
            background: rgba(0, 0, 0, 0.1);
        }

        .session-tab.active .session-tab-delete:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .add-session-btn {
            background: var(--aqua-teal);
            color: var(--pure-white);
            border: none;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: background 0.2s;
        }

        .add-session-btn:hover {
            background: #764ba2;
        }

        /* Main Container */
        .app-container {
            display: grid;
            grid-template-columns: 280px 1fr 280px;
            gap: 0.75rem;
            padding: 0.5rem;
            max-width: 100%;
            margin: 0 auto;
            min-height: calc(100vh - 160px);
        }

        .app-container.fullscreen {
            grid-template-columns: 0 1fr 0;
            gap: 0;
            padding: 0;
            max-width: 100%;
        }

        .app-container.fullscreen .left-panel,
        .app-container.fullscreen .right-panel {
            display: none;
        }

        .app-container.fullscreen .middle-panel {
            max-height: calc(100vh - 120px);
            border-radius: 0;
        }
        
        body.fullscreen-mode .app-header,
        body.fullscreen-mode .session-manager-bar {
            display: none;
        }
        
        body.fullscreen-mode .app-container {
            min-height: 100vh;
        }
        
        body.fullscreen-mode .app-container.fullscreen .middle-panel {
            max-height: 100vh;
        }

        /* Panels */
        .panel {
            background: var(--pure-white);
            border-radius: 12px;
            padding: 1rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            overflow-y: auto;
            max-height: calc(100vh - 140px);
        }

        .middle-panel {
            max-height: calc(100vh - 120px);
            padding: 0.75rem;
            display: flex;
            flex-direction: column;
        }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
            flex-wrap: wrap;
            gap: 0.5rem;
            flex-shrink: 0;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--border-color);
        }

        .panel-header h2 {
            border: none;
            padding: 0;
            margin: 0;
            font-size: 1.2rem;
        }

        .panel-section {
            margin-bottom: 2rem;
        }

        .panel-section:last-child {
            margin-bottom: 0;
        }

        .panel-section h2 {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--aqua-teal);
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--frost-silver);
            padding-bottom: 0.5rem;
        }

        .panel-section h3 {
            font-size: 0.95rem;
            font-weight: 600;
            color: var(--deep-black);
            margin-bottom: 0.75rem;
        }

        .venue-selector {
            display: flex;
            gap: 0.4rem;
            align-items: center;
            flex-wrap: wrap;
        }

        /* Multi-venue selector styling */
        .venue-multi-selector {
            background-color: var(--light-gray);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .venue-multi-selector h4 {
            margin-bottom: 0.75rem;
            font-size: 0.9rem;
            color: var(--deep-black);
        }

        .venue-checkboxes {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            max-height: 150px;
            overflow-y: auto;
        }

        .venue-checkbox-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            background-color: var(--pure-white);
            border-radius: 4px;
        }

        .venue-checkbox-item input[type="checkbox"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
            accent-color: var(--aqua-teal);
        }

        .venue-checkbox-item label {
            cursor: pointer;
            font-size: 0.9rem;
            flex: 1;
        }

        /* Venue Priority Styling */
        .venue-priority-section {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .venue-priority-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .venue-priority-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            background-color: var(--pure-white);
            border-radius: 4px;
            border-left: 3px solid var(--aqua-teal);
        }

        .venue-priority-number {
            background-color: var(--aqua-teal);
            color: var(--pure-white);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .venue-priority-name {
            flex: 1;
            font-weight: 500;
        }

        .venue-priority-controls {
            display: flex;
            gap: 0.25rem;
        }

        .venue-priority-controls button {
            background: var(--light-gray);
            border: none;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .venue-priority-controls button:hover {
            background: var(--frost-silver);
        }

        .btn-venue {
            padding: 0.35rem 0.7rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.75rem;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn-venue-primary {
            background: var(--aqua-teal);
            color: var(--pure-white);
        }

        .btn-venue-primary:hover {
            background: #764ba2;
        }

        .btn-venue-secondary {
            background: var(--frost-silver);
            color: var(--deep-black);
        }

        .btn-venue-secondary:hover {
            background: var(--dark-gray);
            color: var(--pure-white);
        }

        /* Form Elements */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            font-size: 0.9rem;
            color: var(--deep-black);
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid var(--border-color);
            border-radius: 6px;
            font-size: 0.9rem;
            transition: border-color 0.2s;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--aqua-teal);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        /* File Upload */
        .file-upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            background: var(--light-gray);
            cursor: pointer;
            transition: all 0.2s;
        }

        .file-upload-area:hover {
            border-color: var(--aqua-teal);
            background: #e6f7f7;
        }

        .file-upload-area input[type="file"] {
            display: none;
        }

        .file-info {
            margin-top: 0.75rem;
            padding: 0.75rem;
            background: var(--pure-white);
            border-radius: 6px;
            display: none;
        }

        .file-info.active {
            display: block;
        }

        .file-info p {
            margin: 0.25rem 0;
            font-size: 0.85rem;
        }

        .file-name {
            font-weight: 600;
            color: var(--aqua-teal);
        }

        /* Buttons */
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            justify-content: center;
        }

        .btn-primary {
            background: var(--aqua-teal);
            color: var(--pure-white);
        }

        .btn-primary:hover {
            background: #764ba2;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 165, 161, 0.3);
        }

        .btn-secondary {
            background: var(--frost-silver);
            color: var(--deep-black);
        }

        .btn-secondary:hover {
            background: var(--dark-gray);
            color: var(--pure-white);
        }

        .btn-danger {
            background: var(--danger-red);
            color: var(--pure-white);
        }

        .btn-danger:hover {
            background: #c0392b;
        }

        .btn-success {
            background: var(--success-green);
            color: var(--pure-white);
        }

        .btn-success:hover {
            background: #229954;
        }

        .btn-full {
            width: 100%;
        }

        .btn-icon {
            padding: 0.5rem 0.75rem;
        }

        /* Subject/Grade Selector */
        .form-group select {
            cursor: pointer;
        }

        /* Selected Combinations List */
        .combinations-list {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .combination-tag {
            background: var(--aqua-teal);
            color: var(--pure-white);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .combination-tag button {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: var(--pure-white);
            width: 20px;
            height: 20px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s;
        }

        .combination-tag button:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        /* Seating Grid */
        .seating-grid {
            flex: 1;
            min-height: 0;
            overflow-y: auto;
            padding: 0;
        }

        .venue-seating {
            background: var(--pure-white);
            border-radius: 8px;
            padding: 1rem;
            border: 2px solid var(--border-color);
            margin-bottom: 1rem;
        }

        .venue-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--frost-silver);
        }

        .venue-name {
            font-size: 1.1rem;
            font-weight: 700;
            color: var(--aqua-teal);
        }

        .venue-capacity {
            font-size: 0.85rem;
            color: var(--dark-gray);
            font-weight: 500;
        }

        .seat-grid {
            display: grid;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .seat {
            aspect-ratio: 1;
            border: 2px solid var(--border-color);
            border-radius: 6px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 0.5rem;
            font-size: 0.8rem;
            text-align: center;
            transition: all 0.2s;
            cursor: pointer;
            position: relative;
            min-height: 85px;
            min-width: 85px;
            background: var(--pure-white);
        }

        .seat:hover {
            transform: scale(1.03);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        }

        .seat.occupied {
            background: var(--pure-white);
            border-width: 2px;
        }

        .seat.unavailable {
            background: repeating-linear-gradient(
                45deg,
                #f0f0f0,
                #f0f0f0 10px,
                #e0e0e0 10px,
                #e0e0e0 20px
            );
            opacity: 0.5;
            cursor: not-allowed;
        }

        .seat-id {
            font-weight: 700;
            color: var(--deep-black);
            margin-bottom: 0.25rem;
            font-size: 0.85rem;
        }

        .seat-student {
            font-size: 0.75rem;
            line-height: 1.2;
            font-weight: 500;
        }

        .seat-grade {
            font-weight: 600;
            margin-top: 0.25rem;
            font-size: 0.7rem;
        }

        /* Draggable seats */
        .seat.occupied {
            cursor: move;
        }

        .seat.drag-over {
            background: var(--amber) !important;
            border-color: var(--amber) !important;
            opacity: 0.7;
        }

        .seat.dragging {
            opacity: 0.5;
            transform: scale(0.95);
        }

        /* Zone Labels */
        .zone-label {
            grid-column: 1 / -1;
            text-align: center;
            padding: 0.5rem;
            background: var(--frost-silver);
            border-radius: 4px;
            font-weight: 600;
            color: var(--deep-black);
            margin-top: 0.5rem;
        }

        /* Venue List */
        .venue-list {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .venue-item {
            background: var(--light-gray);
            padding: 1rem;
            border-radius: 8px;
            border: 2px solid var(--border-color);
        }

        .venue-item-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 0.5rem;
        }

        .venue-item-name {
            font-weight: 600;
            font-size: 1rem;
            color: var(--aqua-teal);
        }

        .venue-item-actions {
            display: flex;
            gap: 0.5rem;
        }

        .venue-item-details {
            font-size: 0.85rem;
            color: var(--dark-gray);
            margin-bottom: 0.5rem;
        }

        .venue-item-details p {
            margin: 0.25rem 0;
        }

        /* Info Text */
        .info-text {
            text-align: center;
            color: var(--dark-gray);
            font-size: 0.9rem;
            padding: 2rem 1rem;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            color: var(--dark-gray);
        }

        .empty-state p {
            font-size: 1.1rem;
        }

        /* Seating Info Panel */
        .seating-info {
            background: linear-gradient(135deg, #e6f7f7 0%, #cceeed 100%);
            border-radius: 8px;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
            display: none;
            flex-shrink: 0;
        }

        .seating-info.active {
            display: block;
        }

        .seating-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .stat-item {
            background: var(--pure-white);
            padding: 0.4rem;
            border-radius: 6px;
            text-align: center;
        }

        .stat-value {
            font-size: 1.2rem;
            font-weight: 700;
            color: var(--aqua-teal);
        }

        .stat-label {
            font-size: 0.7rem;
            color: var(--dark-gray);
            margin-top: 0.1rem;
        }

        /* Legend */
        .legend {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            padding: 0.5rem;
            background: var(--light-gray);
            border-radius: 8px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.3rem;
            font-size: 0.75rem;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
            border: 2px solid var(--border-color);
        }

        /* Prevention List */
        .prevention-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .prevention-item {
            background: var(--light-gray);
            padding: 0.75rem;
            border-radius: 6px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .prevention-item button {
            background: var(--danger-red);
            color: var(--pure-white);
            border: none;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
        }

        .prevention-item button:hover {
            background: #c0392b;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: var(--pure-white);
            border-radius: 12px;
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-header h2 {
            color: var(--aqua-teal);
            font-size: 1.3rem;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--dark-gray);
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background 0.2s;
        }

        .close-btn:hover {
            background: var(--light-gray);
        }

        /* Export Grade Options - NEW */
        .export-grade-options {
            margin-top: 1rem;
            padding: 1rem;
            background: var(--light-gray);
            border-radius: 8px;
        }

        .export-grade-options h4 {
            margin-bottom: 0.75rem;
            font-size: 0.9rem;
            color: var(--deep-black);
        }

        .export-grade-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            max-height: 200px;
            overflow-y: auto;
        }

        .export-grade-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem;
            background: var(--pure-white);
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s;
            border: 2px solid transparent;
        }

        .export-grade-item:hover {
            background: #e6f7f7;
        }

        .export-grade-item input[type="radio"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
            accent-color: var(--aqua-teal);
        }

        .export-grade-item label {
            cursor: pointer;
            font-size: 0.9rem;
            flex: 1;
            font-weight: 500;
        }

        /* Zone Management */
        .zone-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .zone-item {
            background: var(--light-gray);
            padding: 0.75rem;
            border-radius: 6px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .zone-item-info {
            flex: 1;
        }

        .zone-item-name {
            font-weight: 600;
            color: var(--aqua-teal);
        }

        .zone-item-range {
            font-size: 0.85rem;
            color: var(--dark-gray);
        }

        .zone-item button {
            background: var(--danger-red);
            color: var(--pure-white);
            border: none;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
        }

        .zone-item button:hover {
            background: #c0392b;
        }

        /* Responsive Design */
        @media (max-width: 1400px) {
            .app-container {
                grid-template-columns: 280px 1fr 280px;
            }
        }

        @media (max-width: 1200px) {
            .app-container {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .panel {
                max-height: none;
            }
        }

        /* Print Styles */
        @media print {
            body * {
                visibility: hidden;
            }

            .seating-grid, .seating-grid * {
                visibility: visible;
            }

            .seating-grid {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
            }

            .panel-header {
                display: none;
            }
        }

        /* Session indicator badge */
        .current-session-badge {
            background: var(--amber);
            color: var(--deep-black);
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="app-header">
        <div class="header-content">
            <img src="logo.png" alt="EduClickLab Logo" class="header-logo">
            <h1 style="margin: 0;">Enhanced Seating Plan Generator</h1>
            <p class="subtitle">Professional Exam Roster Management System with Multi-Session Support</p>
        </div>
        <div class="header-right">
            <a href="index.html" class="btn-home">
                <span>←</span> Home
            </a>
            <span class="user-badge" id="userEmailBadge"></span>
        </div>
    </header>

    <script>
        // Display user email in header
        document.addEventListener('DOMContentLoaded', () => {
            const userEmail = localStorage.getItem('currentUserEmail');
            if (userEmail) {
                document.getElementById('userEmailBadge').textContent = userEmail;
            }
        });
    </script>

    <!-- Session Manager Bar -->
    <div class="session-manager-bar">
        <label>📅 Exam Sessions:</label>
        <div class="session-tabs" id="sessionTabs">
            <!-- Session tabs will be dynamically added here -->
        </div>
        <button class="add-session-btn" onclick="showAddSessionModal()">
            <span>➕</span> New Session
        </button>
    </div>

    <!-- Main Container -->
    <div class="app-container">
        <!-- Left Panel: Configuration -->
        <div class="panel left-panel">
            <!-- Student Import Section -->
            <div class="panel-section">
                <h2>📊 Student Data</h2>
                
                <div class="file-upload-area" onclick="document.getElementById('fileInput').click()">
                    <div style="font-size: 2rem; margin-bottom: 0.5rem;">📁</div>
                    <p style="font-weight: 500;">Click to Upload Excel File</p>
                    <p style="font-size: 0.8rem; color: var(--dark-gray); margin-top: 0.5rem;">
                        Columns: first_name, last_name, grade, subject, class
                    </p>
                    <input type="file" id="fileInput" accept=".xlsx,.xls" onchange="handleFileSelect(event)">
                </div>

                <div class="file-info" id="fileInfo">
                    <p><strong>File:</strong> <span class="file-name" id="fileName">No file selected</span></p>
                    <p id="studentCount"></p>
                    <button class="btn btn-primary btn-full" id="uploadBtn" onclick="uploadStudents()" style="display: none; margin-top: 0.75rem;">
                        Process Students
                    </button>
                </div>
            </div>

            <!-- Subject/Grade Selection -->
            <div class="panel-section">
                <h2>🎯 Select Subject/Grade Combinations</h2>
                <div class="form-group">
                    <label for="gradeSelect">Grade</label>
                    <select id="gradeSelect" onchange="updateSubjectOptions()">
                        <option value="">Select grade</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="subjectSelect">Subject</label>
                    <select id="subjectSelect">
                        <option value="">Select subject</option>
                    </select>
                </div>
                <button class="btn btn-primary btn-full" onclick="addCombination()">
                    ➕ Add Combination
                </button>
            </div>

            <!-- Selected Combinations -->
            <div class="panel-section">
                <h3>Selected Combinations</h3>
                <div class="combinations-list" id="combinationsList">
                    <p class="info-text">No combinations selected</p>
                </div>
            </div>

            <!-- Venue Selection -->
            <div class="panel-section">
                <h2>🏢 Venue Selection</h2>
                
                <div class="venue-multi-selector">
                    <h4>Select venues for seating plan:</h4>
                    <div class="venue-checkboxes" id="venueCheckboxes">
                        <p class="info-text">Create venues to see selection options</p>
                    </div>
                </div>

                <div class="venue-priority-section" id="venuePrioritySection" style="display: none;">
                    <h4>Venue Fill Priority Order:</h4>
                    <div class="venue-priority-list" id="venuePriorityList"></div>
                </div>
            </div>

            <!-- Generate Button -->
            <div class="panel-section">
                <button class="btn btn-primary btn-full" onclick="generateSeatingPlan()" style="padding: 1rem; font-size: 1rem;">
                    ✨ Generate Plan for Current Session
                </button>
                <button class="btn btn-secondary btn-full" onclick="resetLayout()" style="padding: 1rem; font-size: 1rem; margin-top: 0.5rem;">
                    🔄 Reset Layout
                </button>
            </div>

            <!-- Clear Data Options -->
            <div class="panel-section">
                <h2>🗑️ Clear Data</h2>
                <button class="btn btn-secondary btn-full" onclick="clearStudentsOnly()" style="margin-bottom: 0.5rem;">
                    Clear Students Only
                </button>
                <button class="btn btn-danger btn-full" onclick="clearAllData()">
                    Clear All Data
                </button>
            </div>
        </div>

        <!-- Middle Panel: Seating Display -->
        <div class="panel middle-panel">
            <div class="panel-header">
                <div>
                    <h2>🪑 Seating Arrangement</h2>
                    <span class="current-session-badge" id="currentSessionDisplay">No Session Selected</span>
                </div>
                <div class="venue-selector">
                    <button class="btn-venue btn-venue-secondary" onclick="toggleFullscreen()">
                        🖥️ <span id="fullscreenText">Fullscreen</span>
                    </button>
                    <button class="btn-venue btn-venue-secondary" onclick="printSeatingPlan()">
                        🖨️ Print
                    </button>
                    <button class="btn-venue btn-venue-secondary" onclick="exportToPDF()">
                        📄 Export PDF
                    </button>
                    <button class="btn-venue btn-venue-secondary" onclick="exportToCSV()">
                        📊 Export CSV
                    </button>
                    <button class="btn-venue btn-venue-secondary" onclick="showSignInSheetModal()">
                        ✍️ Sign-In Sheets
                    </button>
                    <button class="btn-venue btn-venue-primary" onclick="showExportByGradeModal()">
                        📋 Export by Grade
                    </button>
                    <button class="btn-venue btn-venue-primary" onclick="showExportAllSessionsModal()" title="Export all sessions for a specific grade">
                        📚 All Sessions by Grade
                    </button>
                </div>
            </div>

            <div class="seating-info" id="seatingInfo">
                <div class="seating-stats">
                    <div class="stat-item">
                        <div class="stat-value" id="totalSeated">0</div>
                        <div class="stat-label">Students Seated</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="totalCapacity">0</div>
                        <div class="stat-label">Total Capacity</div>
                    </div>
                </div>
                
                <div class="legend" id="legend"></div>
            </div>

            <div class="seating-grid" id="seatingGrid">
                <div class="empty-state">
                    <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                </div>
            </div>
        </div>

        <!-- Right Panel: Venue & Settings -->
        <div class="panel right-panel">
            <!-- Session Info -->
            <div class="panel-section">
                <h2>📅 Current Session Info</h2>
                <div class="form-group">
                    <label for="examDate">Exam Date</label>
                    <input type="date" id="examDate" onchange="updateCurrentSessionDate()">
                </div>
                <div class="form-group">
                    <label for="examName">Exam/Session Name</label>
                    <input type="text" id="examName" placeholder="e.g., Mathematics Final" onchange="updateCurrentSessionName()">
                </div>
            </div>

            <!-- Venue Management -->
            <div class="panel-section">
                <h2>🏢 Venue Management</h2>
                <button class="btn btn-primary btn-full" onclick="showAddVenueModal()" style="margin-bottom: 1rem;">
                    ➕ Add New Venue
                </button>
                
                <div id="venueList" class="venue-list">
                    <p class="info-text">No venues created yet</p>
                </div>
            </div>

            <!-- Seating Options -->
            <div class="panel-section">
                <h2>⚙️ Allocation Settings</h2>
                
                <div class="form-group">
                    <label for="allocationOrder">Allocation Order</label>
                    <select id="allocationOrder">
                        <option value="alphabetical">Alphabetical (by last name)</option>
                        <option value="class-surname">Alphabetical (by class then surname)</option>
                        <option value="random">Random</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="gradePlacement">Grade Placement</label>
                    <select id="gradePlacement">
                        <option value="columns">Same grade in column (front to back)</option>
                        <option value="non-adjacent">Same grade in column (not in adjacent columns)</option>
                        <option value="random">Random</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="fillDirection">Fill Direction</label>
                    <select id="fillDirection">
                        <option value="row">Row by row</option>
                        <option value="column">Column by column</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="venueFillingStart">Start Filling</label>
                    <select id="venueFillingStart">
                        <option value="left">Left to right</option>
                        <option value="right">Right to left</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="openColumnSubjects">Open Column for Subjects</label>
                    <input type="text" id="openColumnSubjects" placeholder="e.g., EGD, Art (comma separated)">
                    <small style="font-size: 0.75rem; color: var(--dark-gray); display: block; margin-top: 0.25rem;">
                        Keeps next column open for subjects needing extra space
                    </small>
                </div>

                <div class="form-group">
                    <label for="seatSpacing">Spacing</label>
                    <select id="seatSpacing">
                        <option value="none">No spacing</option>
                        <option value="horizontal">1-seat gap horizontal</option>
                        <option value="vertical">1-seat gap vertical</option>
                        <option value="both">1-seat gap both directions</option>
                    </select>
                </div>
            </div>

            <!-- Proximity Prevention -->
            <div class="panel-section">
                <h2>🚫 Proximity Prevention</h2>
                <button class="btn btn-secondary btn-full" onclick="showPreventionModal()" style="margin-bottom: 1rem;">
                    Add Prevention Rule
                </button>
                
                <div id="preventionList" class="prevention-list">
                    <p class="info-text">No prevention rules set</p>
                </div>
            </div>

            <!-- Zone Management -->
            <div class="panel-section">
                <h2>📍 Zone Management</h2>
                <p style="font-size: 0.85rem; color: var(--dark-gray); margin-bottom: 1rem;">
                    Create labeled zones within venues (e.g., "Front", "Middle", "Back")
                </p>
                <button class="btn btn-secondary btn-full" onclick="showZoneModal()" style="margin-bottom: 1rem;">
                    ➕ Add Zone
                </button>
                
                <div id="zoneList" class="zone-list">
                    <p class="info-text">No zones created yet</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Modal</h2>
                <button class="close-btn" onclick="closeModal()">×</button>
            </div>
            <div id="modalBody"></div>
        </div>
    </div>

    <script>
        // Global Variables
        let students = [];
        let venues = [];
        let currentSeatingPlan = null;
        let selectedCombinations = [];
        let pendingStudents = [];
        let gradeColorMap = {};
        let preventedPairs = [];
        let venueZones = {}; // { venueId: [{name, startRow, endRow}] }
        let venueSeatMap = {}; // { venueId: { seatId: { available: true/false, student: null } } }
        let selectedVenues = []; // Array of selected venue IDs for multi-venue generation
        let venuePriority = []; // Array of venue IDs in priority order
        
        // NEW: Exam Sessions Management
        let examSessions = {}; // { sessionId: { name, date, seatingPlan, combinations, settings } }
        let currentSessionId = null;

        const gradeColors = [
            'var(--color-1)', 'var(--color-2)', 'var(--color-3)', 'var(--color-4)', 
            'var(--color-5)', 'var(--color-6)', 'var(--color-7)', 'var(--color-8)',
            'var(--color-9)', 'var(--color-10)', 'var(--color-11)', 'var(--color-12)',
            'var(--color-13)', 'var(--color-14)', 'var(--color-15)'
        ];

        // Initialize on page load
        window.onload = function() {
            loadFromLocalStorage();
            loadExamSessions();
            updateUI();
        }

        // ============= NEW: EXAM SESSION MANAGEMENT =============

        async function loadExamSessions() {
            // Wait for Firebase to be ready
            const waitForFirebase = () => {
                return new Promise((resolve) => {
                    if (window.firebaseReady) {
                        resolve();
                    } else {
                        const handleReady = () => {
                            window.removeEventListener('firebaseReady', handleReady);
                            resolve();
                        };
                        window.addEventListener('firebaseReady', handleReady);
                        
                        // Timeout after 10 seconds
                        setTimeout(() => {
                            window.removeEventListener('firebaseReady', handleReady);
                            resolve();
                        }, 10000);
                    }
                });
            };
            
            await waitForFirebase();
            
            try {
                if (window.loadFromFirebase) {
                    const data = await window.loadFromFirebase('seating_plan');
                    if (data) {
                        examSessions = data.examSessions || {};
                        currentSessionId = data.currentSessionId || null;
                        console.log('✅ Sessions loaded from Firebase');
                    } else {
                        console.log('No saved sessions in Firebase, checking localStorage');
                        // Fallback to localStorage
                        const saved = localStorage.getItem('examSessions');
                        if (saved) {
                            examSessions = JSON.parse(saved);
                        }
                        
                        const savedCurrentSession = localStorage.getItem('currentSessionId');
                        if (savedCurrentSession && examSessions[savedCurrentSession]) {
                            currentSessionId = savedCurrentSession;
                        }
                    }
                }
            } catch (error) {
                console.error('Error loading sessions:', error);
                // Fallback to localStorage
                const saved = localStorage.getItem('examSessions');
                if (saved) {
                    examSessions = JSON.parse(saved);
                }
            }
            
            if (!currentSessionId && Object.keys(examSessions).length > 0) {
                currentSessionId = Object.keys(examSessions)[0];
            }
            
            updateSessionTabs();
            if (currentSessionId) {
                loadSession(currentSessionId);
            }
        }

        async function saveExamSessions() {
            if (!window.firebaseReady || !window.saveToFirebase) {
                console.log('⏳ Firebase not ready, saving to localStorage only');
                localStorage.setItem('examSessions', JSON.stringify(examSessions));
                localStorage.setItem('currentSessionId', currentSessionId || '');
                return;
            }
            
            try {
                const success = await window.saveToFirebase('seating_plan', {
                    examSessions,
                    currentSessionId
                });
                if (success) {
                    console.log('✅ Sessions saved to Firebase successfully');
                }
                // Also save to localStorage as backup
                localStorage.setItem('examSessions', JSON.stringify(examSessions));
                localStorage.setItem('currentSessionId', currentSessionId || '');
            } catch (error) {
                console.error('❌ Error saving sessions:', error);
                // Fallback to localStorage
                localStorage.setItem('examSessions', JSON.stringify(examSessions));
                localStorage.setItem('currentSessionId', currentSessionId || '');
            }
        }

        function generateSessionId() {
            return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        }

        function showAddSessionModal() {
            const modalBody = `
                <div class="form-group">
                    <label for="newSessionName">Session Name</label>
                    <input type="text" id="newSessionName" placeholder="e.g., Day 1 - Morning Session">
                </div>
                <div class="form-group">
                    <label for="newSessionDate">Session Date</label>
                    <input type="date" id="newSessionDate">
                </div>
                <button class="btn btn-primary btn-full" onclick="createNewSession()">Create Session</button>
            `;
            
            document.getElementById('modalTitle').textContent = 'Create New Exam Session';
            showModal(modalBody);
        }

        function createNewSession() {
            const name = document.getElementById('newSessionName').value.trim();
            const date = document.getElementById('newSessionDate').value;
            
            if (!name) {
                alert('Please enter a session name');
                return;
            }
            
            const sessionId = generateSessionId();
            examSessions[sessionId] = {
                id: sessionId,
                name: name,
                date: date || '',
                seatingPlan: null,
                combinations: [],
                settings: {
                    allocationOrder: 'alphabetical',
                    gradePlacement: 'columns',
                    fillDirection: 'row',
                    venueFillingStart: 'left',
                    openColumnSubjects: '',
                    seatSpacing: 'none'
                },
                createdAt: new Date().toISOString()
            };
            
            currentSessionId = sessionId;
            saveExamSessions();
            updateSessionTabs();
            loadSession(sessionId);
            closeModal();
            showModal(`Session "${name}" created successfully!`);
        }

        function updateSessionTabs() {
            const container = document.getElementById('sessionTabs');
            
            if (Object.keys(examSessions).length === 0) {
                container.innerHTML = '<p class="info-text" style="margin: 0;">No sessions yet. Click "New Session" to create one.</p>';
                return;
            }
            
            container.innerHTML = '';
            
            // Sort sessions by creation date
            const sortedSessions = Object.values(examSessions).sort((a, b) => 
                new Date(a.createdAt) - new Date(b.createdAt)
            );
            
            sortedSessions.forEach(session => {
                const tab = document.createElement('div');
                tab.className = 'session-tab' + (session.id === currentSessionId ? ' active' : '');
                
                // Format date for display
                let dateDisplay = '';
                if (session.date) {
                    const dateObj = new Date(session.date);
                    const day = String(dateObj.getDate()).padStart(2, '0');
                    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
                    const year = dateObj.getFullYear();
                    dateDisplay = `<div class="session-tab-date">${day}/${month}/${year}</div>`;
                }
                
                tab.innerHTML = `
                    <div class="session-tab-name">
                        <div>${session.name}</div>
                        ${dateDisplay}
                    </div>
                    <button class="session-tab-delete" onclick="deleteSession('${session.id}', event)" title="Delete session">×</button>
                `;
                tab.onclick = (e) => {
                    if (!e.target.classList.contains('session-tab-delete')) {
                        switchSession(session.id);
                    }
                };
                container.appendChild(tab);
            });
        }

        function switchSession(sessionId) {
            if (!examSessions[sessionId]) return;
            
            // Save current session state before switching
            if (currentSessionId && examSessions[currentSessionId]) {
                saveCurrentSessionState();
            }
            
            currentSessionId = sessionId;
            saveExamSessions();
            loadSession(sessionId);
            updateSessionTabs();
        }

        function saveCurrentSessionState() {
            if (!currentSessionId || !examSessions[currentSessionId]) return;
            
            examSessions[currentSessionId].seatingPlan = currentSeatingPlan;
            examSessions[currentSessionId].combinations = selectedCombinations;
            examSessions[currentSessionId].date = document.getElementById('examDate').value;
            examSessions[currentSessionId].name = document.getElementById('examName').value || examSessions[currentSessionId].name;
            examSessions[currentSessionId].settings = {
                allocationOrder: document.getElementById('allocationOrder').value,
                gradePlacement: document.getElementById('gradePlacement').value,
                fillDirection: document.getElementById('fillDirection').value,
                venueFillingStart: document.getElementById('venueFillingStart').value,
                openColumnSubjects: document.getElementById('openColumnSubjects').value,
                seatSpacing: document.getElementById('seatSpacing').value
            };
            
            saveExamSessions();
        }

        function loadSession(sessionId) {
            const session = examSessions[sessionId];
            if (!session) return;
            
            // Load session data
            currentSeatingPlan = session.seatingPlan;
            selectedCombinations = session.combinations || [];
            
            // Update UI
            document.getElementById('examDate').value = session.date || '';
            document.getElementById('examName').value = session.name || '';
            
            // Load settings with defaults
            const settings = session.settings || {};
            document.getElementById('allocationOrder').value = settings.allocationOrder || 'alphabetical';
            document.getElementById('gradePlacement').value = settings.gradePlacement || 'columns';
            document.getElementById('fillDirection').value = settings.fillDirection || 'row';
            document.getElementById('venueFillingStart').value = settings.venueFillingStart || 'left';
            document.getElementById('openColumnSubjects').value = settings.openColumnSubjects || '';
            document.getElementById('seatSpacing').value = settings.seatSpacing || 'none';
            
            // Update display
            updateCombinationsList();
            updateCurrentSessionDisplay();
            
            // Display seating plan if exists
            if (currentSeatingPlan) {
                displaySeatingPlan();
            } else {
                document.getElementById('seatingGrid').innerHTML = `
                    <div class="empty-state">
                        <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                    </div>
                `;
                document.getElementById('seatingInfo').classList.remove('active');
            }
        }

        function deleteSession(sessionId, event) {
            event.stopPropagation();
            
            const session = examSessions[sessionId];
            if (!session) return;
            
            if (!confirm(`Delete session "${session.name}"? This cannot be undone.`)) {
                return;
            }
            
            delete examSessions[sessionId];
            
            // If deleting current session, switch to another one
            if (currentSessionId === sessionId) {
                const remainingSessions = Object.keys(examSessions);
                if (remainingSessions.length > 0) {
                    currentSessionId = remainingSessions[0];
                    loadSession(currentSessionId);
                } else {
                    currentSessionId = null;
                    currentSeatingPlan = null;
                    selectedCombinations = [];
                    document.getElementById('examDate').value = '';
                    document.getElementById('examName').value = '';
                    updateCombinationsList();
                    updateCurrentSessionDisplay();
                }
            }
            
            saveExamSessions();
            updateSessionTabs();
        }

        function updateCurrentSessionDisplay() {
            const badge = document.getElementById('currentSessionDisplay');
            if (currentSessionId && examSessions[currentSessionId]) {
                const session = examSessions[currentSessionId];
                let dateStr = '';
                if (session.date) {
                    const dateObj = new Date(session.date);
                    const day = String(dateObj.getDate()).padStart(2, '0');
                    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
                    const year = dateObj.getFullYear();
                    dateStr = ` - ${day}/${month}/${year}`;
                }
                badge.textContent = `📅 ${session.name}${dateStr}`;
            } else {
                badge.textContent = 'No Session Selected';
            }
        }

        function updateCurrentSessionDate() {
            if (currentSessionId && examSessions[currentSessionId]) {
                examSessions[currentSessionId].date = document.getElementById('examDate').value;
                saveExamSessions();
                updateCurrentSessionDisplay();
                updateSessionTabs();
            }
        }

        function updateCurrentSessionName() {
            if (currentSessionId && examSessions[currentSessionId]) {
                const newName = document.getElementById('examName').value;
                if (newName) {
                    examSessions[currentSessionId].name = newName;
                    saveExamSessions();
                    updateCurrentSessionDisplay();
                    updateSessionTabs();
                }
            }
        }

        // ============= END: EXAM SESSION MANAGEMENT =============

        // ============= NEW: EXPORT BY GRADE =============

        function showExportByGradeModal() {
            if (!currentSeatingPlan || Object.keys(currentSeatingPlan).length === 0) {
                showModal('Please generate a seating plan first');
                return;
            }
            
            // Get all unique grades from current seating plan
            const grades = new Set();
            Object.values(currentSeatingPlan).forEach(venuePlan => {
                venuePlan.allocations.forEach(alloc => {
                    grades.add(alloc.student.grade);
                });
            });
            
            const sortedGrades = Array.from(grades).sort();
            
            let modalBody = `
                <div class="export-grade-options">
                    <h4>Select Grade to Export:</h4>
                    <div class="export-grade-list">
                        <div class="export-grade-item">
                            <input type="radio" name="exportGrade" id="grade_all" value="all" checked>
                            <label for="grade_all">All Grades</label>
                        </div>
            `;
            
            sortedGrades.forEach(grade => {
                // Count students in this grade
                let count = 0;
                Object.values(currentSeatingPlan).forEach(venuePlan => {
                    count += venuePlan.allocations.filter(a => a.student.grade === grade).length;
                });
                
                modalBody += `
                    <div class="export-grade-item">
                        <input type="radio" name="exportGrade" id="grade_${grade}" value="${grade}">
                        <label for="grade_${grade}">Grade ${grade} (${count} students)</label>
                    </div>
                `;
            });
            
            modalBody += `
                    </div>
                </div>
                <div style="margin-top: 1.5rem; display: flex; gap: 0.5rem;">
                    <button class="btn btn-primary" style="flex: 1;" onclick="exportGradeToExcel()">
                        📊 Export to Excel
                    </button>
                    <button class="btn btn-secondary" style="flex: 1;" onclick="exportGradeToCSV()">
                        📄 Export to CSV
                    </button>
                </div>
            `;
            
            document.getElementById('modalTitle').textContent = 'Export by Grade';
            showModal(modalBody);
        }

        function getSelectedGrade() {
            const radios = document.getElementsByName('exportGrade');
            for (let radio of radios) {
                if (radio.checked) {
                    return radio.value;
                }
            }
            return 'all';
        }

        function exportGradeToExcel() {
            const selectedGrade = getSelectedGrade();
            const sessionName = currentSessionId && examSessions[currentSessionId] ? 
                examSessions[currentSessionId].name : 'session';
            const examDate = document.getElementById('examDate').value || 'not-set';
            
            // Prepare data
            let exportData = [];
            
            Object.entries(currentSeatingPlan).forEach(([venueId, venuePlan]) => {
                venuePlan.allocations.forEach(alloc => {
                    const student = alloc.student;
                    if (selectedGrade === 'all' || student.grade === selectedGrade) {
                        exportData.push({
                            'Session': sessionName,
                            'Date': examDate,
                            'Grade': student.grade,
                            'Subject': student.subject,
                            'First Name': student.first_name,
                            'Last Name': student.last_name,
                            'Class': student.class,
                            'Venue': venuePlan.venue.name,
                            'Seat ID': alloc.seat.id
                        });
                    }
                });
            });
            
            // Sort by grade, then venue, then seat
            exportData.sort((a, b) => {
                if (a.Grade !== b.Grade) return a.Grade - b.Grade;
                if (a.Venue !== b.Venue) return a.Venue.localeCompare(b.Venue);
                return a['Seat ID'].localeCompare(b['Seat ID']);
            });
            
            // Create workbook
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.json_to_sheet(exportData);
            
            // Auto-size columns
            const maxWidth = 20;
            const colWidths = Object.keys(exportData[0] || {}).map(key => ({
                wch: Math.min(maxWidth, Math.max(key.length, 10))
            }));
            ws['!cols'] = colWidths;
            
            XLSX.utils.book_append_sheet(wb, ws, 'Seating List');
            
            // Generate filename
            const gradeText = selectedGrade === 'all' ? 'all-grades' : `grade-${selectedGrade}`;
            const filename = `seating-${sessionName.replace(/\s+/g, '-')}-${gradeText}-${examDate}.xlsx`;
            
            XLSX.writeFile(wb, filename);
            closeModal();
        }

        function exportGradeToCSV() {
            const selectedGrade = getSelectedGrade();
            const sessionName = currentSessionId && examSessions[currentSessionId] ? 
                examSessions[currentSessionId].name : 'session';
            const examDate = document.getElementById('examDate').value || 'not-set';
            
            let csv = 'Session,Date,Grade,Subject,First Name,Last Name,Class,Venue,Seat ID\n';
            
            // Collect and sort data
            let rows = [];
            Object.entries(currentSeatingPlan).forEach(([venueId, venuePlan]) => {
                venuePlan.allocations.forEach(alloc => {
                    const student = alloc.student;
                    if (selectedGrade === 'all' || student.grade === selectedGrade) {
                        rows.push({
                            session: sessionName,
                            date: examDate,
                            grade: student.grade,
                            subject: student.subject,
                            firstName: student.first_name,
                            lastName: student.last_name,
                            class: student.class,
                            venue: venuePlan.venue.name,
                            seatId: alloc.seat.id
                        });
                    }
                });
            });
            
            // Sort
            rows.sort((a, b) => {
                if (a.grade !== b.grade) return a.grade - b.grade;
                if (a.venue !== b.venue) return a.venue.localeCompare(b.venue);
                return a.seatId.localeCompare(b.seatId);
            });
            
            // Build CSV
            rows.forEach(row => {
                csv += `"${row.session}","${row.date}",${row.grade},"${row.subject}","${row.firstName}","${row.lastName}","${row.class}","${row.venue}",${row.seatId}\n`;
            });
            
            // Download
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            const gradeText = selectedGrade === 'all' ? 'all-grades' : `grade-${selectedGrade}`;
            a.download = `seating-${sessionName.replace(/\s+/g, '-')}-${gradeText}-${examDate}.csv`;
            a.click();
            URL.revokeObjectURL(url);
            closeModal();
        }

        // ============= END: EXPORT BY GRADE =============

        // ============= NEW: SIGN-IN SHEET EXPORT =============

        function showSignInSheetModal() {
            if (!currentSeatingPlan || Object.keys(currentSeatingPlan).length === 0) {
                showModal('Please generate a seating plan first');
                return;
            }
            
            // Get all venues in current seating plan
            let modalBody = `
                <p style="margin-bottom: 1rem;">Select venue to export sign-in sheet:</p>
                <div class="export-grade-options">
                    <div class="export-grade-list">
            `;
            
            Object.entries(currentSeatingPlan).forEach(([venueId, venuePlan]) => {
                const venue = venuePlan.venue;
                const count = venuePlan.allocations.length;
                
                modalBody += `
                    <div class="export-grade-item">
                        <input type="radio" name="signInVenue" id="venue_signin_${venueId}" value="${venueId}" ${Object.keys(currentSeatingPlan)[0] === venueId ? 'checked' : ''}>
                        <label for="venue_signin_${venueId}">${venue.name} (${count} students)</label>
                    </div>
                `;
            });
            
            modalBody += `
                    </div>
                </div>
                <div style="margin-top: 1.5rem; display: flex; gap: 0.5rem;">
                    <button class="btn btn-primary" style="flex: 1;" onclick="exportSignInSheet()">
                        📄 Export Sign-In Sheet
                    </button>
                </div>
            `;
            
            document.getElementById('modalTitle').textContent = 'Export Sign-In Sheet';
            showModal(modalBody);
        }

        function getSelectedSignInVenue() {
            const radios = document.getElementsByName('signInVenue');
            for (let radio of radios) {
                if (radio.checked) {
                    return radio.value;
                }
            }
            return null;
        }

        function exportSignInSheet() {
            const venueId = getSelectedSignInVenue();
            if (!venueId || !currentSeatingPlan[venueId]) {
                showModal('Please select a venue');
                return;
            }
            
            const venuePlan = currentSeatingPlan[venueId];
            const venue = venuePlan.venue;
            const sessionName = currentSessionId && examSessions[currentSessionId] ? 
                examSessions[currentSessionId].name : 'Exam Session';
            const examDate = document.getElementById('examDate').value || 'Not set';
            
            // Sort allocations by seat ID
            const sortedAllocations = [...venuePlan.allocations].sort((a, b) => 
                a.seat.id.localeCompare(b.seat.id)
            );
            
            // Create workbook
            const wb = XLSX.utils.book_new();
            
            // Create header
            const data = [
                [sessionName],
                [`Date: ${examDate}`],
                [`Venue: ${venue.name}`],
                [],
                ['#', 'Seat', 'Student Name', 'Grade', 'Subject', 'Signature']
            ];
            
            // Add student rows
            sortedAllocations.forEach((alloc, index) => {
                const student = alloc.student;
                data.push([
                    index + 1,
                    alloc.seat.id,
                    `${student.first_name} ${student.last_name}`,
                    student.grade,
                    student.subject,
                    '' // Empty signature column
                ]);
            });
            
            const ws = XLSX.utils.aoa_to_sheet(data);
            
            // Set column widths
            ws['!cols'] = [
                { wch: 5 },  // #
                { wch: 8 },  // Seat
                { wch: 25 }, // Name
                { wch: 8 },  // Grade
                { wch: 20 }, // Subject
                { wch: 25 }  // Signature
            ];
            
            // Merge header cells
            ws['!merges'] = [
                { s: { r: 0, c: 0 }, e: { r: 0, c: 5 } }, // Session name
                { s: { r: 1, c: 0 }, e: { r: 1, c: 5 } }, // Date
                { s: { r: 2, c: 0 }, e: { r: 2, c: 5 } }  // Venue
            ];
            
            XLSX.utils.book_append_sheet(wb, ws, 'Sign-In Sheet');
            
            // Generate filename
            const filename = `signin-sheet-${venue.name.replace(/\s+/g, '-')}-${sessionName.replace(/\s+/g, '-')}-${examDate}.xlsx`;
            
            XLSX.writeFile(wb, filename);
            closeModal();
        }

        // ============= END: SIGN-IN SHEET EXPORT =============

        // ============= NEW: EXPORT ALL SESSIONS BY GRADE (PIVOT FORMAT) =============

        function showExportAllSessionsModal() {
            // Check if there are any sessions with seating plans
            const sessionsWithPlans = Object.values(examSessions).filter(s => s.seatingPlan && Object.keys(s.seatingPlan).length > 0);
            
            if (sessionsWithPlans.length === 0) {
                showModal('No sessions with seating plans found. Please generate seating plans for your sessions first.');
                return;
            }
            
            // Get all unique grades across all sessions
            const grades = new Set();
            sessionsWithPlans.forEach(session => {
                Object.values(session.seatingPlan).forEach(venuePlan => {
                    venuePlan.allocations.forEach(alloc => {
                        grades.add(alloc.student.grade);
                    });
                });
            });
            
            const sortedGrades = Array.from(grades).sort();
            
            let modalBody = `
                <p style="margin-bottom: 1rem;">Export seating data across all exam sessions in a pivot table format.</p>
                <p style="margin-bottom: 1rem; font-size: 0.9rem; color: var(--dark-gray);">
                    <strong>${sessionsWithPlans.length}</strong> session(s) with seating plans will be included.
                </p>
                <div class="export-grade-options">
                    <h4>Select Grade to Export:</h4>
                    <div class="export-grade-list">
            `;
            
            sortedGrades.forEach(grade => {
                // Count students in this grade across all sessions
                let studentNames = new Set();
                sessionsWithPlans.forEach(session => {
                    Object.values(session.seatingPlan).forEach(venuePlan => {
                        venuePlan.allocations
                            .filter(a => a.student.grade === grade)
                            .forEach(a => studentNames.add(`${a.student.first_name} ${a.student.last_name}`));
                    });
                });
                
                modalBody += `
                    <div class="export-grade-item">
                        <input type="radio" name="exportAllGrade" id="all_grade_${grade}" value="${grade}" ${sortedGrades[0] === grade ? 'checked' : ''}>
                        <label for="all_grade_${grade}">Grade ${grade} (${studentNames.size} unique students)</label>
                    </div>
                `;
            });
            
            modalBody += `
                    </div>
                </div>
                <div style="margin-top: 1.5rem; display: flex; gap: 0.5rem;">
                    <button class="btn btn-primary" style="flex: 1;" onclick="exportAllSessionsPivotToExcel()">
                        📊 Export to Excel
                    </button>
                    <button class="btn btn-secondary" style="flex: 1;" onclick="exportAllSessionsPivotToCSV()">
                        📄 Export to CSV
                    </button>
                </div>
            `;
            
            document.getElementById('modalTitle').textContent = 'Export All Sessions by Grade';
            showModal(modalBody);
        }

        function getSelectedAllGrade() {
            const radios = document.getElementsByName('exportAllGrade');
            for (let radio of radios) {
                if (radio.checked) {
                    return radio.value;
                }
            }
            return null;
        }

        function exportAllSessionsPivotToExcel() {
            const selectedGrade = getSelectedAllGrade();
            if (!selectedGrade) {
                showModal('Please select a grade');
                return;
            }
            
            const sessionsWithPlans = Object.values(examSessions)
                .filter(s => s.seatingPlan && Object.keys(s.seatingPlan).length > 0)
                .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
            
            if (sessionsWithPlans.length === 0) {
                showModal('No sessions with seating plans found.');
                return;
            }
            
            // Build student data structure
            const studentData = {}; // { studentName: { sessionId: "Venue - Seat" } }
            
            sessionsWithPlans.forEach(session => {
                Object.values(session.seatingPlan).forEach(venuePlan => {
                    venuePlan.allocations
                        .filter(a => a.student.grade === selectedGrade)
                        .forEach(alloc => {
                            const studentName = `${alloc.student.first_name} ${alloc.student.last_name}`;
                            if (!studentData[studentName]) {
                                studentData[studentName] = {};
                            }
                            studentData[studentName][session.id] = `${venuePlan.venue.name} - ${alloc.seat.id}`;
                        });
                });
            });
            
            // Create Excel data
            const data = [];
            
            // Header row 1: Dates
            const dateRow = ['Date'];
            sessionsWithPlans.forEach(session => {
                if (session.date) {
                    const dateObj = new Date(session.date);
                    const day = String(dateObj.getDate()).padStart(2, '0');
                    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
                    const year = dateObj.getFullYear();
                    dateRow.push(`${day}/${month}/${year}`);
                } else {
                    dateRow.push('Not set');
                }
            });
            data.push(dateRow);
            
            // Header row 2: Session names
            const sessionRow = ['Session'];
            sessionsWithPlans.forEach(session => {
                sessionRow.push(session.name);
            });
            data.push(sessionRow);
            
            // Header row 3: Subjects
            const subjectRow = ['Subject'];
            sessionsWithPlans.forEach(session => {
                // Get unique subjects for this session and grade
                const subjects = new Set();
                Object.values(session.seatingPlan).forEach(venuePlan => {
                    venuePlan.allocations
                        .filter(a => a.student.grade === selectedGrade)
                        .forEach(alloc => subjects.add(alloc.student.subject));
                });
                const subjectList = Array.from(subjects).join(', ');
                subjectRow.push(subjectList);
            });
            data.push(subjectRow);
            
            // Header row 4: Column header
            data.push(['Name', ...Array(sessionsWithPlans.length).fill('')]);
            
            // Student rows
            const sortedStudents = Object.keys(studentData).sort();
            sortedStudents.forEach(studentName => {
                const row = [studentName];
                sessionsWithPlans.forEach(session => {
                    row.push(studentData[studentName][session.id] || '');
                });
                data.push(row);
            });
            
            // Create workbook
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.aoa_to_sheet(data);
            
            // Set column widths
            ws['!cols'] = [
                { wch: 20 }, // Name column
                ...Array(sessionsWithPlans.length).fill({ wch: 18 })
            ];
            
            XLSX.utils.book_append_sheet(wb, ws, `Grade ${selectedGrade}`);
            
            // Generate filename
            const timestamp = new Date().toISOString().split('T')[0];
            const filename = `all-sessions-grade-${selectedGrade}-${timestamp}.xlsx`;
            
            XLSX.writeFile(wb, filename);
            closeModal();
        }

        function exportAllSessionsPivotToCSV() {
            const selectedGrade = getSelectedAllGrade();
            if (!selectedGrade) {
                showModal('Please select a grade');
                return;
            }
            
            const sessionsWithPlans = Object.values(examSessions)
                .filter(s => s.seatingPlan && Object.keys(s.seatingPlan).length > 0)
                .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
            
            if (sessionsWithPlans.length === 0) {
                showModal('No sessions with seating plans found.');
                return;
            }
            
            // Build student data structure
            const studentData = {}; // { studentName: { sessionId: "Venue - Seat" } }
            
            sessionsWithPlans.forEach(session => {
                Object.values(session.seatingPlan).forEach(venuePlan => {
                    venuePlan.allocations
                        .filter(a => a.student.grade === selectedGrade)
                        .forEach(alloc => {
                            const studentName = `${alloc.student.first_name} ${alloc.student.last_name}`;
                            if (!studentData[studentName]) {
                                studentData[studentName] = {};
                            }
                            studentData[studentName][session.id] = `${venuePlan.venue.name} - ${alloc.seat.id}`;
                        });
                });
            });
            
            // Build CSV
            let csv = '';
            
            // Header row 1: Dates
            csv += 'Date';
            sessionsWithPlans.forEach(session => {
                const dateObj = new Date(session.date || '');
                const day = String(dateObj.getDate()).padStart(2, '0');
                const month = String(dateObj.getMonth() + 1).padStart(2, '0');
                const year = dateObj.getFullYear();
                const date = session.date ? `${day}/${month}/${year}` : 'Not set';
                csv += `,"${date}"`;
            });
            csv += '\n';
            
            // Header row 2: Session names
            csv += 'Session';
            sessionsWithPlans.forEach(session => {
                csv += `,"${session.name}"`;
            });
            csv += '\n';
            
            // Header row 3: Subjects
            csv += 'Subject';
            sessionsWithPlans.forEach(session => {
                // Get unique subjects for this session and grade
                const subjects = new Set();
                Object.values(session.seatingPlan).forEach(venuePlan => {
                    venuePlan.allocations
                        .filter(a => a.student.grade === selectedGrade)
                        .forEach(alloc => subjects.add(alloc.student.subject));
                });
                const subjectList = Array.from(subjects).join(', ');
                csv += `,"${subjectList}"`;
            });
            csv += '\n';
            
            // Header row 4: Column header
            csv += 'Name';
            sessionsWithPlans.forEach(() => {
                csv += ',';
            });
            csv += '\n';
            
            // Student rows
            const sortedStudents = Object.keys(studentData).sort();
            sortedStudents.forEach(studentName => {
                csv += `"${studentName}"`;
                sessionsWithPlans.forEach(session => {
                    const location = studentData[studentName][session.id] || '';
                    csv += `,"${location}"`;
                });
                csv += '\n';
            });
            
            // Download
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            const timestamp = new Date().toISOString().split('T')[0];
            a.download = `all-sessions-grade-${selectedGrade}-${timestamp}.csv`;
            a.click();
            URL.revokeObjectURL(url);
            closeModal();
        }

        // ============= END: EXPORT ALL SESSIONS BY GRADE (PIVOT FORMAT) =============

        // File Upload Handler
        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (!file) return;

            document.getElementById('fileName').textContent = file.name;
            document.getElementById('studentCount').textContent = 'Processing...';
            document.getElementById('fileInfo').classList.add('active');
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(firstSheet);
                    
                    pendingStudents = jsonData.map((row, index) => ({
                        id: `student_${Date.now()}_${index}`,
                        first_name: row.first_name || row['First Name'] || '',
                        last_name: row.last_name || row['Last Name'] || '',
                        grade: String(row.grade || row.Grade || ''),
                        subject: row.subject || row.Subject || '',
                        class: row.class || row.Class || ''
                    }));
                    
                    document.getElementById('studentCount').textContent = `${pendingStudents.length} students found`;
                    document.getElementById('uploadBtn').style.display = 'block';
                } catch (error) {
                    document.getElementById('studentCount').textContent = 'Error reading file';
                    console.error('Error:', error);
                }
            };
            reader.readAsArrayBuffer(file);
        }

        function uploadStudents() {
            students = pendingStudents;
            pendingStudents = [];
            
            updateStudentCount();
            updateSubjectGradeSelector();
            saveToLocalStorage();
            
            showModal(`Successfully imported ${students.length} students!`);
        }

        function updateStudentCount() {
            if (students.length > 0) {
                document.getElementById('fileName').textContent = `${students.length} students loaded`;
                document.getElementById('fileInfo').classList.add('active');
            }
        }

        function updateSubjectGradeSelector() {
            const gradeSelect = document.getElementById('gradeSelect');
            const subjectSelect = document.getElementById('subjectSelect');
            
            if (students.length === 0) {
                gradeSelect.innerHTML = '<option value="">Select grade</option>';
                subjectSelect.innerHTML = '<option value="">Select subject</option>';
                return;
            }

            // Get unique grades
            const grades = [...new Set(students.map(s => s.grade))].sort();
            gradeSelect.innerHTML = '<option value="">Select grade</option>';
            grades.forEach(grade => {
                const option = document.createElement('option');
                option.value = grade;
                option.textContent = `Grade ${grade}`;
                gradeSelect.appendChild(option);
            });
            
            // Initialize subject options
            updateSubjectOptions();
        }

        function updateSubjectOptions() {
            const gradeSelect = document.getElementById('gradeSelect');
            const subjectSelect = document.getElementById('subjectSelect');
            const selectedGrade = gradeSelect.value;
            
            subjectSelect.innerHTML = '<option value="">Select subject</option>';
            
            if (!selectedGrade || students.length === 0) return;
            
            // Get subjects for selected grade
            const subjects = [...new Set(
                students
                    .filter(s => s.grade === selectedGrade)
                    .map(s => s.subject)
            )].sort();
            
            subjects.forEach(subject => {
                const count = students.filter(s => s.grade === selectedGrade && s.subject === subject).length;
                const option = document.createElement('option');
                option.value = subject;
                option.textContent = `${subject} (${count} students)`;
                subjectSelect.appendChild(option);
            });
        }

        function addCombination() {
            const gradeSelect = document.getElementById('gradeSelect');
            const subjectSelect = document.getElementById('subjectSelect');
            const grade = gradeSelect.value;
            const subject = subjectSelect.value;
            
            if (!grade || !subject) {
                alert('Please select both grade and subject');
                return;
            }
            
            // Check if already added
            const exists = selectedCombinations.some(c => 
                c.subject === subject && c.grade === grade
            );
            
            if (exists) {
                alert('This combination is already added');
                return;
            }
            
            selectedCombinations.push({ subject, grade });
            updateCombinationsList();
            
            // Save to current session if exists
            if (currentSessionId && examSessions[currentSessionId]) {
                examSessions[currentSessionId].combinations = selectedCombinations;
                saveExamSessions();
            }
            
            saveToLocalStorage();
            
            // Reset selections
            gradeSelect.value = '';
            subjectSelect.value = '';
            updateSubjectOptions();
        }

        function toggleCombination(subject, grade) {
            const index = selectedCombinations.findIndex(c => 
                c.subject === subject && c.grade === grade
            );
            
            if (index > -1) {
                selectedCombinations.splice(index, 1);
            }
            
            updateCombinationsList();
            
            // Save to current session if exists
            if (currentSessionId && examSessions[currentSessionId]) {
                examSessions[currentSessionId].combinations = selectedCombinations;
                saveExamSessions();
            }
            
            saveToLocalStorage();
        }

        function updateCombinationsList() {
            const container = document.getElementById('combinationsList');
            
            if (selectedCombinations.length === 0) {
                container.innerHTML = '<p class="info-text">No combinations selected</p>';
                return;
            }

            container.innerHTML = '';
            selectedCombinations.forEach((combo, index) => {
                const tag = document.createElement('div');
                tag.className = 'combination-tag';
                tag.innerHTML = `
                    ${combo.subject} - Grade ${combo.grade}
                    <button onclick="removeCombination(${index})">×</button>
                `;
                container.appendChild(tag);
            });
        }

        function removeCombination(index) {
            selectedCombinations.splice(index, 1);
            updateCombinationsList();
            
            // Save to current session if exists
            if (currentSessionId && examSessions[currentSessionId]) {
                examSessions[currentSessionId].combinations = selectedCombinations;
                saveExamSessions();
            }
            
            saveToLocalStorage();
        }

        // Venue Management
        function showAddVenueModal() {
            const modalBody = `
                <div class="form-group">
                    <label for="venueName">Venue Name</label>
                    <input type="text" id="venueName" placeholder="e.g., Main Hall">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="venueRows">Number of Rows</label>
                        <input type="number" id="venueRows" min="1" max="50" value="10">
                    </div>
                    <div class="form-group">
                        <label for="venueCols">Seats per Row</label>
                        <input type="number" id="venueCols" min="1" max="50" value="10">
                    </div>
                </div>
                <button class="btn btn-primary btn-full" onclick="addVenue()">Add Venue</button>
            `;
            
            document.getElementById('modalTitle').textContent = 'Add New Venue';
            showModal(modalBody);
        }

        function addVenue() {
            const name = document.getElementById('venueName').value.trim();
            const rows = parseInt(document.getElementById('venueRows').value);
            const cols = parseInt(document.getElementById('venueCols').value);
            
            if (!name) {
                alert('Please enter a venue name');
                return;
            }
            
            if (rows < 1 || rows > 50 || cols < 1 || cols > 50) {
                alert('Rows and columns must be between 1 and 50');
                return;
            }
            
            const venue = {
                id: `venue_${Date.now()}`,
                name: name,
                rows: rows,
                cols: cols,
                capacity: rows * cols
            };
            
            venues.push(venue);
            initializeVenueSeatMap(venue.id, rows, cols);
            updateVenueList();
            updateVenueCheckboxes();
            saveToLocalStorage();
            closeModal();
        }

        function initializeVenueSeatMap(venueId, rows, cols) {
            venueSeatMap[venueId] = {};
            for (let row = 1; row <= rows; row++) {
                for (let col = 1; col <= cols; col++) {
                    // Column letter (A, B, C...) + Row number (1, 2, 3...)
                    const colLetter = String.fromCharCode(64 + col); // A=65, so 64+1=A
                    const seatId = `${colLetter}${row}`;
                    venueSeatMap[venueId][seatId] = {
                        available: true,
                        student: null
                    };
                }
            }
        }

        function updateVenueList() {
            const container = document.getElementById('venueList');
            
            if (venues.length === 0) {
                container.innerHTML = '<p class="info-text">No venues created yet</p>';
                return;
            }

            container.innerHTML = '';
            venues.forEach(venue => {
                const div = document.createElement('div');
                div.className = 'venue-item';
                div.innerHTML = `
                    <div class="venue-item-header">
                        <div class="venue-item-name">${venue.name}</div>
                        <div class="venue-item-actions">
                            <button class="btn-icon btn-secondary" onclick="manageSeatAvailability('${venue.id}')" title="Manage Seats">
                                🪑
                            </button>
                            <button class="btn-icon btn-danger" onclick="deleteVenue('${venue.id}')" title="Delete">
                                🗑️
                            </button>
                        </div>
                    </div>
                    <div class="venue-item-details">
                        <p><strong>Capacity:</strong> ${venue.capacity} seats</p>
                        <p><strong>Layout:</strong> ${venue.rows} rows × ${venue.cols} columns</p>
                    </div>
                `;
                container.appendChild(div);
            });
        }

        function deleteVenue(venueId) {
            if (confirm('Delete this venue? This cannot be undone.')) {
                venues = venues.filter(v => v.id !== venueId);
                delete venueZones[venueId];
                delete venueSeatMap[venueId];
                selectedVenues = selectedVenues.filter(id => id !== venueId);
                venuePriority = venuePriority.filter(id => id !== venueId);
                updateVenueList();
                updateVenueCheckboxes();
                updateZoneList();
                saveToLocalStorage();
            }
        }

        function manageSeatAvailability(venueId) {
            const venue = venues.find(v => v.id === venueId);
            if (!venue) return;
            
            const seatMap = venueSeatMap[venueId] || {};
            
            let modalBody = `
                <p style="margin-bottom: 1rem;">Click on seats to toggle availability (green = available, red = unavailable)</p>
                <div class="seat-grid" style="grid-template-columns: repeat(${venue.cols}, 1fr); max-width: 100%;">
            `;
            
            // Header row with column letters
            for (let col = 1; col <= venue.cols; col++) {
                const colLetter = String.fromCharCode(64 + col);
                modalBody += `
                    <div style="font-weight: bold; text-align: center; padding: 0.5rem; background: var(--frost-silver);">
                        ${colLetter}
                    </div>
                `;
            }
            
            for (let row = 1; row <= venue.rows; row++) {
                for (let col = 1; col <= venue.cols; col++) {
                    const colLetter = String.fromCharCode(64 + col);
                    const seatId = `${colLetter}${row}`;
                    const seat = seatMap[seatId] || { available: true };
                    const bgColor = seat.available ? '#27ae60' : '#e74c3c';
                    
                    modalBody += `
                        <div class="seat" 
                             style="background: ${bgColor}; color: white; cursor: pointer; font-weight: bold;"
                             onclick="toggleSeatAvailability('${venueId}', '${seatId}', this)">
                            ${seatId}
                        </div>
                    `;
                }
            }
            
            modalBody += `</div>`;
            
            document.getElementById('modalTitle').textContent = `Manage Seats - ${venue.name}`;
            showModal(modalBody);
        }

        function toggleSeatAvailability(venueId, seatId, element) {
            if (!venueSeatMap[venueId]) return;
            
            const seat = venueSeatMap[venueId][seatId];
            if (!seat) return;
            
            seat.available = !seat.available;
            element.style.background = seat.available ? '#27ae60' : '#e74c3c';
            
            saveToLocalStorage();
        }

        // Multi-venue selection
        function updateVenueCheckboxes() {
            const container = document.getElementById('venueCheckboxes');
            
            if (venues.length === 0) {
                container.innerHTML = '<p class="info-text">Create venues to see selection options</p>';
                document.getElementById('venuePrioritySection').style.display = 'none';
                return;
            }

            container.innerHTML = '';
            venues.forEach(venue => {
                const isSelected = selectedVenues.includes(venue.id);
                const div = document.createElement('div');
                div.className = 'venue-checkbox-item';
                div.innerHTML = `
                    <input type="checkbox" id="venue_check_${venue.id}" 
                           ${isSelected ? 'checked' : ''}
                           onchange="toggleVenueSelection('${venue.id}')">
                    <label for="venue_check_${venue.id}">${venue.name} (${venue.capacity} seats)</label>
                `;
                container.appendChild(div);
            });
            
            updateVenuePriorityDisplay();
        }

        function toggleVenueSelection(venueId) {
            const index = selectedVenues.indexOf(venueId);
            if (index > -1) {
                selectedVenues.splice(index, 1);
                venuePriority = venuePriority.filter(id => id !== venueId);
            } else {
                selectedVenues.push(venueId);
                venuePriority.push(venueId);
            }
            
            updateVenuePriorityDisplay();
            saveToLocalStorage();
        }

        function updateVenuePriorityDisplay() {
            const section = document.getElementById('venuePrioritySection');
            const container = document.getElementById('venuePriorityList');
            
            if (selectedVenues.length === 0) {
                section.style.display = 'none';
                return;
            }
            
            section.style.display = 'block';
            container.innerHTML = '';
            
            venuePriority.forEach((venueId, index) => {
                const venue = venues.find(v => v.id === venueId);
                if (!venue) return;
                
                const div = document.createElement('div');
                div.className = 'venue-priority-item';
                div.innerHTML = `
                    <div class="venue-priority-number">${index + 1}</div>
                    <div class="venue-priority-name">${venue.name}</div>
                    <div class="venue-priority-controls">
                        ${index > 0 ? `<button onclick="moveVenuePriority(${index}, -1)" title="Move up">↑</button>` : ''}
                        ${index < venuePriority.length - 1 ? `<button onclick="moveVenuePriority(${index}, 1)" title="Move down">↓</button>` : ''}
                    </div>
                `;
                container.appendChild(div);
            });
        }

        function moveVenuePriority(index, direction) {
            const newIndex = index + direction;
            if (newIndex < 0 || newIndex >= venuePriority.length) return;
            
            const temp = venuePriority[index];
            venuePriority[index] = venuePriority[newIndex];
            venuePriority[newIndex] = temp;
            
            updateVenuePriorityDisplay();
            saveToLocalStorage();
        }

        // Zone Management
        function showZoneModal() {
            if (venues.length === 0) {
                showModal('Please create at least one venue first');
                return;
            }
            
            const venueOptions = venues.map(v => 
                `<option value="${v.id}">${v.name}</option>`
            ).join('');
            
            const modalBody = `
                <div class="form-group">
                    <label for="zoneVenue">Select Venue</label>
                    <select id="zoneVenue" onchange="updateZoneRowLimits()">${venueOptions}</select>
                </div>
                <div class="form-group">
                    <label for="zoneName">Zone Name</label>
                    <input type="text" id="zoneName" placeholder="e.g., Front Section">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="zoneStartRow">Start Row</label>
                        <input type="number" id="zoneStartRow" min="1" value="1">
                    </div>
                    <div class="form-group">
                        <label for="zoneEndRow">End Row</label>
                        <input type="number" id="zoneEndRow" min="1" value="5">
                    </div>
                </div>
                <button class="btn btn-primary btn-full" onclick="addZone()">Add Zone</button>
            `;
            
            document.getElementById('modalTitle').textContent = 'Add Zone';
            showModal(modalBody);
            updateZoneRowLimits();
        }

        function updateZoneRowLimits() {
            const venueId = document.getElementById('zoneVenue')?.value;
            if (!venueId) return;
            
            const venue = venues.find(v => v.id === venueId);
            if (!venue) return;
            
            const startRow = document.getElementById('zoneStartRow');
            const endRow = document.getElementById('zoneEndRow');
            
            startRow.max = venue.rows;
            endRow.max = venue.rows;
        }

        function addZone() {
            const venueId = document.getElementById('zoneVenue').value;
            const name = document.getElementById('zoneName').value.trim();
            const startRow = parseInt(document.getElementById('zoneStartRow').value);
            const endRow = parseInt(document.getElementById('zoneEndRow').value);
            
            if (!name) {
                alert('Please enter a zone name');
                return;
            }
            
            if (startRow > endRow) {
                alert('Start row must be less than or equal to end row');
                return;
            }
            
            const venue = venues.find(v => v.id === venueId);
            if (!venue) return;
            
            if (startRow < 1 || endRow > venue.rows) {
                alert(`Row numbers must be between 1 and ${venue.rows}`);
                return;
            }
            
            if (!venueZones[venueId]) {
                venueZones[venueId] = [];
            }
            
            venueZones[venueId].push({
                id: `zone_${Date.now()}`,
                name: name,
                startRow: startRow,
                endRow: endRow
            });
            
            updateZoneList();
            saveToLocalStorage();
            closeModal();
        }

        function updateZoneList() {
            const container = document.getElementById('zoneList');
            
            if (Object.keys(venueZones).length === 0 || 
                Object.values(venueZones).every(zones => zones.length === 0)) {
                container.innerHTML = '<p class="info-text">No zones created yet</p>';
                return;
            }

            container.innerHTML = '';
            Object.entries(venueZones).forEach(([venueId, zones]) => {
                const venue = venues.find(v => v.id === venueId);
                if (!venue || zones.length === 0) return;
                
                zones.forEach(zone => {
                    const div = document.createElement('div');
                    div.className = 'zone-item';
                    div.innerHTML = `
                        <div class="zone-item-info">
                            <div class="zone-item-name">${zone.name}</div>
                            <div class="zone-item-range">${venue.name} - Rows ${zone.startRow}-${zone.endRow}</div>
                        </div>
                        <button onclick="deleteZone('${venueId}', '${zone.id}')">Delete</button>
                    `;
                    container.appendChild(div);
                });
            });
        }

        function deleteZone(venueId, zoneId) {
            if (!venueZones[venueId]) return;
            
            venueZones[venueId] = venueZones[venueId].filter(z => z.id !== zoneId);
            updateZoneList();
            saveToLocalStorage();
        }

        // Proximity Prevention
        function showPreventionModal() {
            const modalBody = `
                <div class="form-group">
                    <label for="preventStudent1">Student 1 (First Name Last Name)</label>
                    <input type="text" id="preventStudent1" placeholder="e.g., John Doe">
                </div>
                <div class="form-group">
                    <label for="preventStudent2">Student 2 (First Name Last Name)</label>
                    <input type="text" id="preventStudent2" placeholder="e.g., Jane Smith">
                </div>
                <button class="btn btn-primary btn-full" onclick="addPreventionRule()">Add Rule</button>
            `;
            
            document.getElementById('modalTitle').textContent = 'Add Proximity Prevention';
            showModal(modalBody);
        }

        function addPreventionRule() {
            const student1 = document.getElementById('preventStudent1').value.trim();
            const student2 = document.getElementById('preventStudent2').value.trim();
            
            if (!student1 || !student2) {
                alert('Please enter both student names');
                return;
            }
            
            preventedPairs.push({ student1, student2 });
            updatePreventionList();
            saveToLocalStorage();
            closeModal();
        }

        function updatePreventionList() {
            const container = document.getElementById('preventionList');
            
            if (preventedPairs.length === 0) {
                container.innerHTML = '<p class="info-text">No prevention rules set</p>';
                return;
            }

            container.innerHTML = '';
            preventedPairs.forEach((pair, index) => {
                const div = document.createElement('div');
                div.className = 'prevention-item';
                div.innerHTML = `
                    <span>${pair.student1} ↔ ${pair.student2}</span>
                    <button onclick="deletePreventionRule(${index})">Remove</button>
                `;
                container.appendChild(div);
            });
        }

        function deletePreventionRule(index) {
            preventedPairs.splice(index, 1);
            updatePreventionList();
            saveToLocalStorage();
        }

        // Generate Seating Plan
        function generateSeatingPlan() {
            // Check if session exists
            if (!currentSessionId) {
                showModal('Please create an exam session first using the "New Session" button above.');
                return;
            }
            
            if (selectedCombinations.length === 0) {
                showModal('Please select at least one subject/grade combination');
                return;
            }
            
            if (selectedVenues.length === 0) {
                showModal('Please select at least one venue');
                return;
            }

            // Filter students based on selected combinations
            const filteredStudents = students.filter(student => 
                selectedCombinations.some(combo => 
                    combo.subject === student.subject && combo.grade === student.grade
                )
            );

            if (filteredStudents.length === 0) {
                showModal('No students found for selected combinations');
                return;
            }

            // Calculate total capacity
            let totalCapacity = 0;
            selectedVenues.forEach(venueId => {
                const venue = venues.find(v => v.id === venueId);
                if (venue) {
                    const availableSeats = Object.values(venueSeatMap[venueId] || {})
                        .filter(seat => seat.available).length;
                    totalCapacity += availableSeats;
                }
            });

            if (filteredStudents.length > totalCapacity) {
                showModal(`Not enough capacity! Students: ${filteredStudents.length}, Available seats: ${totalCapacity}`);
                return;
            }

            // Get seating settings
            const settings = {
                allocationOrder: document.getElementById('allocationOrder').value,
                gradePlacement: document.getElementById('gradePlacement').value,
                fillDirection: document.getElementById('fillDirection').value,
                venueFillingStart: document.getElementById('venueFillingStart').value,
                openColumnSubjects: document.getElementById('openColumnSubjects').value,
                seatSpacing: document.getElementById('seatSpacing').value
            };

            // Assign grade colors
            const uniqueGrades = [...new Set(filteredStudents.map(s => s.grade))];
            gradeColorMap = {};
            uniqueGrades.forEach((grade, index) => {
                gradeColorMap[grade] = gradeColors[index % gradeColors.length];
            });

            // Generate seating
            try {
                currentSeatingPlan = allocateStudentsToVenues(filteredStudents, selectedVenues, settings);
                
                // Save to current session
                if (currentSessionId && examSessions[currentSessionId]) {
                    examSessions[currentSessionId].seatingPlan = currentSeatingPlan;
                    saveExamSessions();
                }
                
                displaySeatingPlan();
                saveToLocalStorage();
            } catch (error) {
                showModal(`Error generating seating plan: ${error.message}`);
                console.error('Seating generation error:', error);
            }
        }

        // Reset Layout Function
        function resetLayout() {
            if (!currentSeatingPlan || Object.keys(currentSeatingPlan).length === 0) {
                showModal('No seating plan to reset');
                return;
            }
            
            if (confirm('This will clear the current seating arrangement. Do you want to continue?')) {
                currentSeatingPlan = null;
                
                // Clear from current session
                if (currentSessionId && examSessions[currentSessionId]) {
                    examSessions[currentSessionId].seatingPlan = null;
                    saveExamSessions();
                }
                
                // Reset display
                document.getElementById('seatingGrid').innerHTML = `
                    <div class="empty-state">
                        <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                    </div>
                `;
                document.getElementById('seatingInfo').classList.remove('active');
                
                saveToLocalStorage();
                showModal('Layout has been reset!');
            }
        }

        function allocateStudentsToVenues(students, venueIds, settings) {
            const plan = {};
            let studentsCopy = [...students];

            // Step 1: Apply allocation order
            switch (settings.allocationOrder) {
                case 'alphabetical':
                    studentsCopy.sort((a, b) => {
                        const lastNameComp = a.last_name.localeCompare(b.last_name);
                        if (lastNameComp !== 0) return lastNameComp;
                        return a.first_name.localeCompare(b.first_name);
                    });
                    break;
                case 'class-surname':
                    studentsCopy.sort((a, b) => {
                        const classComp = a.class.localeCompare(b.class);
                        if (classComp !== 0) return classComp;
                        return a.last_name.localeCompare(b.last_name);
                    });
                    break;
                case 'random':
                    for (let i = studentsCopy.length - 1; i > 0; i--) {
                        const j = Math.floor(Math.random() * (i + 1));
                        [studentsCopy[i], studentsCopy[j]] = [studentsCopy[j], studentsCopy[i]];
                    }
                    break;
            }

            // Step 2: Apply grade placement strategies
            if (settings.gradePlacement === 'columns' || settings.gradePlacement === 'non-adjacent') {
                // Group students by grade
                const byGrade = {};
                studentsCopy.forEach(s => {
                    if (!byGrade[s.grade]) byGrade[s.grade] = [];
                    byGrade[s.grade].push(s);
                });
                
                // For 'columns', we want same grades to fill columns
                // This is achieved by sorting students by grade primarily
                studentsCopy.sort((a, b) => {
                    const gradeComp = a.grade.localeCompare(b.grade);
                    if (gradeComp !== 0) return gradeComp;
                    // Maintain the original order within same grade
                    return 0;
                });
            }
            // For 'random' grade placement, we keep the allocation order as is (no special grade handling)

            // Parse open column subjects
            const openColumnSubjects = settings.openColumnSubjects
                .split(',')
                .map(s => s.trim().toLowerCase())
                .filter(s => s.length > 0);

            // Step 3: Allocate to venues
            let studentIndex = 0;
            
            for (const venueId of venuePriority) {
                const venue = venues.find(v => v.id === venueId);
                if (!venue) continue;

                const allocations = [];
                const seatMap = venueSeatMap[venueId] || {};
                const seats = [];

                // Generate available seats based on fill direction
                if (settings.fillDirection === 'column') {
                    // Fill column by column
                    const startCol = settings.venueFillingStart === 'right' ? venue.cols : 1;
                    const endCol = settings.venueFillingStart === 'right' ? 1 : venue.cols;
                    const colStep = settings.venueFillingStart === 'right' ? -1 : 1;
                    
                    for (let col = startCol; settings.venueFillingStart === 'right' ? col >= endCol : col <= endCol; col += colStep) {
                        for (let row = 1; row <= venue.rows; row++) {
                            const colLetter = String.fromCharCode(64 + col);
                            const seatId = `${colLetter}${row}`;
                            if (seatMap[seatId] && seatMap[seatId].available) {
                                seats.push({ id: seatId, row, col });
                            }
                        }
                    }
                } else {
                    // Fill row by row (default)
                    for (let row = 1; row <= venue.rows; row++) {
                        const startCol = settings.venueFillingStart === 'right' ? venue.cols : 1;
                        const endCol = settings.venueFillingStart === 'right' ? 1 : venue.cols;
                        const colStep = settings.venueFillingStart === 'right' ? -1 : 1;
                        
                        for (let col = startCol; settings.venueFillingStart === 'right' ? col >= endCol : col <= endCol; col += colStep) {
                            const colLetter = String.fromCharCode(64 + col);
                            const seatId = `${colLetter}${row}`;
                            if (seatMap[seatId] && seatMap[seatId].available) {
                                seats.push({ id: seatId, row, col });
                            }
                        }
                    }
                }

                // Track column grades for non-adjacent checking
                const columnGrades = {}; // { col: Set of grades in this column }
                
                // Apply seat spacing and allocate students
                for (let i = 0; i < seats.length && studentIndex < studentsCopy.length; i++) {
                    const seat = seats[i];
                    let student = studentsCopy[studentIndex];

                    // Check if we should skip this seat based on spacing
                    let skipSeat = false;
                    
                    if (settings.seatSpacing === 'horizontal' || settings.seatSpacing === 'both') {
                        // Skip every other column
                        if (settings.fillDirection === 'row' && seat.col % 2 === 0) skipSeat = true;
                        if (settings.fillDirection === 'column') {
                            const lastAlloc = allocations[allocations.length - 1];
                            if (lastAlloc && lastAlloc.seat.col === seat.col && Math.abs(lastAlloc.seat.row - seat.row) === 1) {
                                skipSeat = true;
                            }
                        }
                    }
                    
                    if (settings.seatSpacing === 'vertical' || settings.seatSpacing === 'both') {
                        // Skip every other row
                        if (settings.fillDirection === 'column' && seat.row % 2 === 0) skipSeat = true;
                    }

                    if (skipSeat) continue;

                    // For non-adjacent grade placement, check if same grade in adjacent column
                    if (settings.gradePlacement === 'non-adjacent') {
                        // Check if this grade is already in adjacent columns
                        const adjacentCols = [seat.col - 1, seat.col + 1];
                        let gradeInAdjacentColumn = false;
                        
                        for (const adjCol of adjacentCols) {
                            if (columnGrades[adjCol] && columnGrades[adjCol].has(student.grade)) {
                                gradeInAdjacentColumn = true;
                                break;
                            }
                        }
                        
                        // If current student's grade is in adjacent column, try to find a different grade
                        if (gradeInAdjacentColumn) {
                            let foundAlternative = false;
                            // Look ahead in the student list for a different grade
                            for (let j = studentIndex + 1; j < studentsCopy.length; j++) {
                                const altStudent = studentsCopy[j];
                                let altGradeInAdjacent = false;
                                
                                for (const adjCol of adjacentCols) {
                                    if (columnGrades[adjCol] && columnGrades[adjCol].has(altStudent.grade)) {
                                        altGradeInAdjacent = true;
                                        break;
                                    }
                                }
                                
                                if (!altGradeInAdjacent) {
                                    // Swap students
                                    studentsCopy[j] = student;
                                    student = altStudent;
                                    studentsCopy[studentIndex] = student;
                                    foundAlternative = true;
                                    break;
                                }
                            }
                            
                            // If no alternative found, skip this seat
                            if (!foundAlternative) {
                                continue;
                            }
                        }
                        
                        // Track this grade in this column
                        if (!columnGrades[seat.col]) {
                            columnGrades[seat.col] = new Set();
                        }
                        columnGrades[seat.col].add(student.grade);
                    }

                    // Check if student's subject needs open column
                    const needsOpenColumn = openColumnSubjects.some(sub => 
                        student.subject.toLowerCase().includes(sub)
                    );
                    
                    allocations.push({
                        seat: seat,
                        student: student
                    });
                    studentIndex++;

                    // If student needs open column, skip next seat in row
                    if (needsOpenColumn && settings.fillDirection === 'row') {
                        i++; // Skip next seat
                    }
                }

                plan[venueId] = {
                    venue: venue,
                    allocations: allocations
                };

                if (studentIndex >= studentsCopy.length) break;
            }

            return plan;
        }

        function displaySeatingPlan() {
            const container = document.getElementById('seatingGrid');
            const info = document.getElementById('seatingInfo');
            
            if (!currentSeatingPlan || Object.keys(currentSeatingPlan).length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                    </div>
                `;
                info.classList.remove('active');
                return;
            }

            let html = '';
            let totalSeated = 0;
            let totalCapacity = 0;

            Object.entries(currentSeatingPlan).forEach(([venueId, venuePlan]) => {
                const venue = venuePlan.venue;
                totalSeated += venuePlan.allocations.length;
                totalCapacity += venue.capacity;

                html += `
                    <div class="venue-seating">
                        <div class="venue-header">
                            <div class="venue-name">${venue.name}</div>
                            <div class="venue-capacity">${venuePlan.allocations.length} / ${venue.capacity} seats</div>
                        </div>
                `;

                // Create seat map for quick lookup
                const allocMap = {};
                venuePlan.allocations.forEach(alloc => {
                    allocMap[alloc.seat.id] = alloc;
                });

                // Create grid with column headers
                html += `<div style="display: grid; grid-template-columns: 45px repeat(${venue.cols}, 1fr); gap: 0.5rem; margin-top: 0.5rem;">`;
                
                // Empty corner cell
                html += `<div></div>`;
                
                // Column headers (A, B, C, ...)
                for (let col = 1; col <= venue.cols; col++) {
                    const colLetter = String.fromCharCode(64 + col);
                    html += `<div style="font-weight: 700; font-size: 0.9rem; text-align: center; padding: 0.3rem; background: var(--frost-silver); border-radius: 4px;">${colLetter}</div>`;
                }

                // Render all seats with row numbers
                const zones = venueZones[venueId] || [];
                for (let row = 1; row <= venue.rows; row++) {
                    // Check if this row starts a new zone
                    const zone = zones.find(z => z.startRow === row);
                    if (zone) {
                        html += `<div class="zone-label" style="grid-column: 1 / -1;">${zone.name}</div>`;
                    }

                    // Row number on the left
                    html += `<div style="font-weight: 700; font-size: 0.9rem; text-align: center; padding: 0.3rem; background: var(--frost-silver); border-radius: 4px; display: flex; align-items: center; justify-content: center;">${row}</div>`;

                    for (let col = 1; col <= venue.cols; col++) {
                        const colLetter = String.fromCharCode(64 + col);
                        const seatId = `${colLetter}${row}`;
                        const alloc = allocMap[seatId];
                        const seatData = venueSeatMap[venueId]?.[seatId];

                        if (alloc) {
                            const student = alloc.student;
                            const color = gradeColorMap[student.grade] || gradeColors[0];
                            html += `
                                <div class="seat occupied" draggable="true" 
                                     data-venue-id="${venueId}" 
                                     data-seat-id="${seatId}"
                                     data-student-id="${student.id}"
                                     ondragstart="handleDragStart(event)" 
                                     ondragend="handleDragEnd(event)"
                                     ondragover="handleDragOver(event)"
                                     ondrop="handleDrop(event)"
                                     ondragleave="handleDragLeave(event)"
                                     style="border-color: ${color}; background-color: ${color}15;">
                                    <div class="seat-id">${seatId}</div>
                                    <div class="seat-student">${student.first_name} ${student.last_name}</div>
                                    <div class="seat-grade">Grade ${student.grade}</div>
                                </div>
                            `;
                        } else if (!seatData || !seatData.available) {
                            html += `
                                <div class="seat unavailable">
                                    <div class="seat-id">${seatId}</div>
                                </div>
                            `;
                        } else {
                            html += `
                                <div class="seat" 
                                     data-venue-id="${venueId}" 
                                     data-seat-id="${seatId}"
                                     ondragover="handleDragOver(event)"
                                     ondrop="handleDrop(event)"
                                     ondragleave="handleDragLeave(event)">
                                    <div class="seat-id">${seatId}</div>
                                </div>
                            `;
                        }
                    }
                }

                html += `
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;

            // Update stats
            document.getElementById('totalSeated').textContent = totalSeated;
            document.getElementById('totalCapacity').textContent = totalCapacity;

            // Update legend
            const legend = document.getElementById('legend');
            legend.innerHTML = '';
            Object.entries(gradeColorMap).forEach(([grade, color]) => {
                const count = Object.values(currentSeatingPlan)
                    .reduce((sum, vp) => sum + vp.allocations.filter(a => a.student.grade === grade).length, 0);
                
                const item = document.createElement('div');
                item.className = 'legend-item';
                item.innerHTML = `
                    <div class="legend-color" style="background: ${color};"></div>
                    <span>Grade ${grade} (${count})</span>
                `;
                legend.appendChild(item);
            });

            info.classList.add('active');
        }

        // Drag and Drop Functions
        let draggedElement = null;
        let draggedStudentInfo = null;

        // Fullscreen toggle
        function toggleFullscreen() {
            const container = document.querySelector('.app-container');
            const button = document.getElementById('fullscreenText');
            const body = document.body;
            
            if (container.classList.contains('fullscreen')) {
                container.classList.remove('fullscreen');
                body.classList.remove('fullscreen-mode');
                button.textContent = 'Fullscreen';
            } else {
                container.classList.add('fullscreen');
                body.classList.add('fullscreen-mode');
                button.textContent = 'Exit Fullscreen';
            }
        }

        function handleDragStart(event) {
            draggedElement = event.target;
            draggedElement.classList.add('dragging');
            
            const venueId = draggedElement.dataset.venueId;
            const seatId = draggedElement.dataset.seatId;
            
            // Find the student in the current seating plan
            if (currentSeatingPlan[venueId]) {
                const allocation = currentSeatingPlan[venueId].allocations.find(
                    alloc => alloc.seat.id === seatId
                );
                if (allocation) {
                    draggedStudentInfo = {
                        venueId: venueId,
                        seatId: seatId,
                        student: allocation.student
                    };
                }
            }
            
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/html', draggedElement.innerHTML);
        }

        function handleDragEnd(event) {
            if (draggedElement) {
                draggedElement.classList.remove('dragging');
            }
        }

        function handleDragOver(event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';
            
            const target = event.target.closest('.seat');
            if (target && target !== draggedElement && !target.classList.contains('unavailable')) {
                target.classList.add('drag-over');
            }
            
            return false;
        }

        function handleDragLeave(event) {
            const target = event.target.closest('.seat');
            if (target) {
                target.classList.remove('drag-over');
            }
        }

        function handleDrop(event) {
            event.stopPropagation();
            event.preventDefault();
            
            const target = event.target.closest('.seat');
            if (!target || target === draggedElement || target.classList.contains('unavailable')) {
                target?.classList.remove('drag-over');
                return false;
            }
            
            target.classList.remove('drag-over');
            
            const targetVenueId = target.dataset.venueId;
            const targetSeatId = target.dataset.seatId;
            
            if (!draggedStudentInfo || !targetVenueId || !targetSeatId) return false;
            
            // Check if target seat is occupied
            const targetAllocation = currentSeatingPlan[targetVenueId]?.allocations.find(
                alloc => alloc.seat.id === targetSeatId
            );
            
            // Remove student from original position
            const sourceVenuePlan = currentSeatingPlan[draggedStudentInfo.venueId];
            if (sourceVenuePlan) {
                sourceVenuePlan.allocations = sourceVenuePlan.allocations.filter(
                    alloc => alloc.seat.id !== draggedStudentInfo.seatId
                );
            }
            
            // If target is occupied, swap students
            if (targetAllocation) {
                // Move target student to source position
                const targetStudent = targetAllocation.student;
                
                // Remove target student from current position
                currentSeatingPlan[targetVenueId].allocations = 
                    currentSeatingPlan[targetVenueId].allocations.filter(
                        alloc => alloc.seat.id !== targetSeatId
                    );
                
                // Add target student to source position
                sourceVenuePlan.allocations.push({
                    seat: { id: draggedStudentInfo.seatId },
                    student: targetStudent
                });
            }
            
            // Add dragged student to target position
            currentSeatingPlan[targetVenueId].allocations.push({
                seat: { id: targetSeatId },
                student: draggedStudentInfo.student
            });
            
            // Save and refresh display
            if (currentSessionId && examSessions[currentSessionId]) {
                examSessions[currentSessionId].seatingPlan = currentSeatingPlan;
                saveExamSessions();
            }
            saveToLocalStorage();
            displaySeatingPlan();
            
            draggedElement = null;
            draggedStudentInfo = null;
            
            return false;
        }

        // Export Functions
        function printSeatingPlan() {
            if (!currentSeatingPlan || Object.keys(currentSeatingPlan).length === 0) {
                showModal('Generate a seating plan first');
                return;
            }
            window.print();
        }

        function exportToPDF() {
            if (!currentSeatingPlan || Object.keys(currentSeatingPlan).length === 0) {
                showModal('Generate a seating plan first');
                return;
            }
            
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF('p', 'mm', 'a4');
            
            const examDateValue = document.getElementById('examDate').value;
            let examDate = 'Not set';
            if (examDateValue) {
                const dateObj = new Date(examDateValue);
                const day = String(dateObj.getDate()).padStart(2, '0');
                const month = String(dateObj.getMonth() + 1).padStart(2, '0');
                const year = dateObj.getFullYear();
                examDate = `${day}/${month}/${year}`;
            }
            
            const sessionName = currentSessionId && examSessions[currentSessionId] ? 
                examSessions[currentSessionId].name : 'Seating Plan';
            
            let yPos = 20;
            
            pdf.setFontSize(16);
            pdf.text(sessionName, 105, yPos, { align: 'center' });
            yPos += 10;
            pdf.setFontSize(10);
            pdf.text(`Date: ${examDate}`, 105, yPos, { align: 'center' });
            yPos += 15;
            
            Object.entries(currentSeatingPlan).forEach(([venueId, venuePlan]) => {
                if (yPos > 250) {
                    pdf.addPage();
                    yPos = 20;
                }
                
                pdf.setFontSize(14);
                pdf.text(venuePlan.venue.name, 20, yPos);
                yPos += 8;
                
                pdf.setFontSize(9);
                venuePlan.allocations.forEach(alloc => {
                    if (yPos > 270) {
                        pdf.addPage();
                        yPos = 20;
                    }
                    
                    const s = alloc.student;
                    pdf.text(
                        `${alloc.seat.id}: ${s.first_name} ${s.last_name} (Grade ${s.grade} - ${s.subject})`,
                        25,
                        yPos
                    );
                    yPos += 6;
                });
                
                yPos += 10;
            });
            
            pdf.save(`${sessionName.replace(/\s+/g, '-')}-seating-plan-${examDate.replace(/\//g, '-')}.pdf`);
        }

        function exportToCSV() {
            if (!currentSeatingPlan || Object.keys(currentSeatingPlan).length === 0) {
                showModal('Generate a seating plan first');
                return;
            }
            
            const examDateValue = document.getElementById('examDate').value;
            let examDate = 'Not set';
            if (examDateValue) {
                const dateObj = new Date(examDateValue);
                const day = String(dateObj.getDate()).padStart(2, '0');
                const month = String(dateObj.getMonth() + 1).padStart(2, '0');
                const year = dateObj.getFullYear();
                examDate = `${day}/${month}/${year}`;
            }
            
            const sessionName = currentSessionId && examSessions[currentSessionId] ? 
                examSessions[currentSessionId].name : 'session';
            const examName = document.getElementById('examName')?.value || 'Not specified';
            
            let csv = 'session,exam_name,exam_date,subject,grade,venue,seat_id,first_name,last_name,class\n';
            
            Object.entries(currentSeatingPlan).forEach(([venueId, venuePlan]) => {
                venuePlan.allocations.forEach(alloc => {
                    const s = alloc.student;
                    csv += `"${sessionName}","${examName}","${examDate}",${s.subject},${s.grade},${venuePlan.venue.name},${alloc.seat.id},${s.first_name},${s.last_name},${s.class}\n`;
                });
            });
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${sessionName.replace(/\s+/g, '-')}-seating-plan-${examDate.replace(/\//g, '-')}.csv`;
            a.click();
            URL.revokeObjectURL(url);
        }

        // Modal Functions
        function showModal(content) {
            const modal = document.getElementById('modal');
            const modalBody = document.getElementById('modalBody');
            
            if (typeof content === 'string') {
                modalBody.innerHTML = `<p style="padding: 1rem 0;">${content}</p>`;
            } else {
                modalBody.innerHTML = content;
            }
            
            modal.classList.add('active');
        }

        function closeModal() {
            document.getElementById('modal').classList.remove('active');
        }

        // Clear Students Only Data
        function clearStudentsOnly() {
            if (confirm('This will clear all student data but keep your venue configurations and settings. Continue?')) {
                students = [];
                selectedCombinations = [];
                currentSeatingPlan = null;
                pendingStudents = [];
                gradeColorMap = {};
                preventedPairs = [];
                
                // Clear session seating plans
                Object.values(examSessions).forEach(session => {
                    session.seatingPlan = null;
                    session.combinations = [];
                });
                
                saveToLocalStorage();
                saveExamSessions();
                
                document.getElementById('fileName').textContent = 'No file selected';
                document.getElementById('studentCount').textContent = '';
                document.getElementById('uploadBtn').style.display = 'none';
                document.getElementById('gradeSelect').innerHTML = '<option value="">Select grade</option>';
                document.getElementById('subjectSelect').innerHTML = '<option value="">Select subject</option>';
                document.getElementById('combinationsList').innerHTML = 
                    '<p class="info-text">No combinations selected</p>';
                document.getElementById('seatingGrid').innerHTML = `
                    <div class="empty-state">
                        <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                    </div>
                `;
                document.getElementById('seatingInfo').classList.remove('active');
                
                updatePreventionList();
                
                showModal('Student data cleared successfully! Your venue configurations and settings have been preserved.');
            }
        }

        // Clear All Data
        function clearAllData() {
            if (confirm('This will clear all data including students, venues, sessions, and settings. Continue?')) {
                students = [];
                venues = [];
                currentSeatingPlan = null;
                selectedCombinations = [];
                pendingStudents = [];
                preventedPairs = [];
                venueZones = {};
                venueSeatMap = {};
                selectedVenues = [];
                venuePriority = [];
                examSessions = {};
                currentSessionId = null;
                
                localStorage.clear();
                
                document.getElementById('fileName').textContent = 'No file selected';
                document.getElementById('studentCount').textContent = '';
                document.getElementById('uploadBtn').style.display = 'none';
                document.getElementById('examDate').value = '';
                document.getElementById('examName').value = '';
                document.getElementById('gradeSelect').innerHTML = '<option value="">Select grade</option>';
                document.getElementById('subjectSelect').innerHTML = '<option value="">Select subject</option>';
                document.getElementById('combinationsList').innerHTML = 
                    '<p class="info-text">No combinations selected</p>';
                document.getElementById('venueList').innerHTML = 
                    '<p class="info-text">No venues created yet</p>';
                document.getElementById('venueCheckboxes').innerHTML = 
                    '<p class="info-text">Create venues to see selection options</p>';
                document.getElementById('venuePrioritySection').style.display = 'none';
                document.getElementById('seatingGrid').innerHTML = `
                    <div class="empty-state">
                        <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                    </div>
                `;
                document.getElementById('seatingInfo').classList.remove('active');
                
                updatePreventionList();
                updateZoneList();
                updateSessionTabs();
                updateCurrentSessionDisplay();
                
                showModal('All data cleared successfully!');
            }
        }

        // Enhanced Local Storage
        async function saveToLocalStorage() {
            // Save to localStorage
            localStorage.setItem('students', JSON.stringify(students));
            localStorage.setItem('venues', JSON.stringify(venues));
            localStorage.setItem('selectedCombinations', JSON.stringify(selectedCombinations));
            localStorage.setItem('preventedPairs', JSON.stringify(preventedPairs));
            localStorage.setItem('venueZones', JSON.stringify(venueZones));
            localStorage.setItem('venueSeatMap', JSON.stringify(venueSeatMap));
            localStorage.setItem('selectedVenues', JSON.stringify(selectedVenues));
            localStorage.setItem('venuePriority', JSON.stringify(venuePriority));
            
            // Also save to Firebase
            if (window.firebaseInitialized && window.saveToFirebase) {
                try {
                    await window.saveToFirebase('seating_plan', {
                        examSessions,
                        currentSessionId
                    });
                } catch (error) {
                    console.error('Error saving to Firebase:', error);
                }
            }
        }

        function loadFromLocalStorage() {
            const savedStudents = localStorage.getItem('students');
            const savedVenues = localStorage.getItem('venues');
            const savedCombinations = localStorage.getItem('selectedCombinations');
            const savedPairs = localStorage.getItem('preventedPairs');
            const savedZones = localStorage.getItem('venueZones');
            const savedSeatMap = localStorage.getItem('venueSeatMap');
            const savedSelectedVenues = localStorage.getItem('selectedVenues');
            const savedVenuePriority = localStorage.getItem('venuePriority');
            
            if (savedStudents) {
                students = JSON.parse(savedStudents);
                updateStudentCount();
                updateSubjectGradeSelector();
            }
            
            if (savedVenues) {
                venues = JSON.parse(savedVenues);
                updateVenueList();
                updateVenueCheckboxes();
                
                venues.forEach(venue => {
                    if (!venueSeatMap[venue.id]) {
                        initializeVenueSeatMap(venue.id, venue.rows, venue.cols);
                    }
                });
            }
            
            if (savedCombinations) {
                selectedCombinations = JSON.parse(savedCombinations);
                updateCombinationsList();
            }
            
            if (savedPairs) {
                preventedPairs = JSON.parse(savedPairs);
                updatePreventionList();
            }
            
            if (savedZones) {
                venueZones = JSON.parse(savedZones);
                updateZoneList();
            }
            
            if (savedSeatMap) {
                venueSeatMap = JSON.parse(savedSeatMap);
            }
            
            if (savedSelectedVenues) {
                selectedVenues = JSON.parse(savedSelectedVenues);
                updateVenueCheckboxes();
            }
            
            if (savedVenuePriority) {
                venuePriority = JSON.parse(savedVenuePriority);
                updateVenuePriorityDisplay();
            }
        }

        // Update UI
        function updateUI() {
            updateVenueList();
            updateVenueCheckboxes();
            updatePreventionList();
            updateZoneList();
            updateCurrentSessionDisplay();
        }

        // Click outside modal to close
        window.onclick = function(event) {
            const modal = document.getElementById('modal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Auto-save current session periodically
        setInterval(() => {
            if (currentSessionId && examSessions[currentSessionId]) {
                saveCurrentSessionState();
            }
        }, 30000); // Every 30 seconds
    </script>
</body>
</html>
