<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Seating Plan Generator - Exam Roster</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Firebase -->
    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
        import { getAuth, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
        import { getFirestore, doc, setDoc, getDoc } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';

        const firebaseConfig = {
            apiKey: "AIzaSyDk0WZdFVImwinLFNYj8SSghLcxC_SDAp8",
            authDomain: "edu-clicklab.firebaseapp.com",
            projectId: "edu-clicklab",
            storageBucket: "edu-clicklab.firebasestorage.app",
            messagingSenderId: "1029624910209",
            appId: "1:1029624910209:web:20a3b9664fca69b7b21880",
            measurementId: "G-6DMZ7QTWGM"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Make Firebase available globally FIRST
        window.firebaseAuth = auth;
        window.firebaseDb = db;
        window.firebaseReady = false;
        window.currentFirebaseUser = null;

        // Check if user is authenticated
        onAuthStateChanged(auth, (user) => {
            if (!user) {
                window.location.href = 'index.html';
            } else {
                window.currentFirebaseUser = user;
                window.firebaseReady = true;
                // Dispatch event to notify page
                window.dispatchEvent(new CustomEvent('firebaseReady'));
                console.log('✅ Firebase authenticated and ready');
            }
        });

        // Save data to Firestore
        window.saveToFirebase = async function(collectionName, data) {
            const user = auth.currentUser || window.currentFirebaseUser;
            if (!user) {
                console.log('⏳ Waiting for user authentication...');
                return false;
            }

            try {
                await setDoc(doc(db, collectionName, user.uid), {
                    data: data,
                    lastUpdated: new Date().toISOString()
                });
                console.log('✅ Data saved to Firebase successfully');
                return true;
            } catch (error) {
                console.error('❌ Error saving to Firebase:', error);
                return false;
            }
        };

        // Load data from Firestore
        window.loadFromFirebase = async function(collectionName) {
            const user = auth.currentUser || window.currentFirebaseUser;
            if (!user) {
                console.log('⏳ Waiting for user authentication...');
                return null;
            }

            try {
                const docRef = doc(db, collectionName, user.uid);
                const docSnap = await getDoc(docRef);

                if (docSnap.exists()) {
                    console.log('✅ Data loaded from Firebase successfully');
                    return docSnap.data().data;
                } else {
                    console.log('ℹ️ No saved data found in Firebase');
                    return null;
                }
            } catch (error) {
                console.error('Error loading from Firebase:', error);
                return null;
            }
        };
    </script>
    <style>
        /* Exam Roster Design System */
        :root {
            --aqua-teal: #667eea;
            --deep-black: #000000;
            --frost-silver: #D1D3D4;
            --pure-white: #FFFFFF;
            --amber: #FFC107;
            --light-gray: #F5F5F5;
            --dark-gray: #666666;
            --border-color: #E0E0E0;
            --danger-red: #e74c3c;
            --success-green: #27ae60;
            
            /* Extended Color Palette for Grade-Subject Combinations */
            --color-1: #FF6B6B;  --color-2: #4ECDC4;  --color-3: #45B7D1;
            --color-4: #FFA07A;  --color-5: #98D8C8;  --color-6: #F7DC6F;
            --color-7: #BB8FCE;  --color-8: #85C1E2;  --color-9: #F8B739;
            --color-10: #52B788; --color-11: #E07A5F; --color-12: #81B29A;
            --color-13: #F2CC8F; --color-14: #E63946; --color-15: #A8DADC;
            --color-16: #F4A460; --color-17: #9370DB; --color-18: #20B2AA;
            --color-19: #FFB6C1; --color-20: #87CEEB; --color-21: #FF7F50;
            --color-22: #BA55D3; --color-23: #48D1CC; --color-24: #F0E68C;
            --color-25: #DDA0DD; --color-26: #B0E0E6; --color-27: #FFDAB9;
            --color-28: #EE82EE; --color-29: #40E0D0; --color-30: #FFE4B5;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--deep-black);
            line-height: 1.6;
            min-height: 100vh;
        }

        /* Header */
        .app-header {
            background: linear-gradient(135deg, var(--aqua-teal) 0%, #764ba2 100%);
            color: var(--pure-white);
            padding: 1.5rem 2rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-content h1 {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .subtitle {
            font-size: 0.9rem;
            opacity: 0.9;
            font-weight: 300;
        }

        .btn-home {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 0.6rem 1.2rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s;
        }

        .btn-home:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .header-right {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 0.5rem;
        }

        .user-badge {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        /* Logo Styles */
        .logo-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .logo-preview {
            width: 80px;
            height: 80px;
            border: 2px dashed var(--border-color);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background: var(--pure-white);
        }

        .logo-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

        .logo-preview-text {
            color: var(--dark-gray);
            font-size: 0.85rem;
            text-align: center;
        }

        /* Container */
        .container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 1.5rem;
            width: 100%;
            box-sizing: border-box;
        }

        /* Card */
        .card {
            background: var(--pure-white);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.25rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--light-gray);
        }

        .card-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--deep-black);
        }

        /* Buttons */
        .btn {
            padding: 0.65rem 1.4rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: var(--aqua-teal);
            color: white;
        }

        .btn-primary:hover {
            background: #5568d3;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: var(--frost-silver);
            color: var(--deep-black);
        }

        .btn-secondary:hover {
            background: #b8babc;
        }

        .btn-danger {
            background: var(--danger-red);
            color: white;
        }

        .btn-danger:hover {
            background: #c0392b;
        }

        .btn-success {
            background: var(--success-green);
            color: white;
        }

        .btn-success:hover {
            background: #229954;
        }

        .btn-warning {
            background: var(--amber);
            color: var(--deep-black);
        }

        .btn-warning:hover {
            background: #ffb300;
        }

        /* Form Elements */
        .form-group {
            margin-bottom: 1.25rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--deep-black);
        }

        input[type="text"],
        input[type="number"],
        input[type="date"],
        input[type="file"],
        select,
        textarea {
            width: 100%;
            padding: 0.65rem;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-family: inherit;
            font-size: 0.95rem;
            transition: all 0.3s;
        }

        input:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: var(--aqua-teal);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* Grid Layouts */
        .two-col-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .three-col-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
        }

        /* File Upload Area */
        .upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            background: var(--light-gray);
            transition: all 0.3s;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }

        .upload-area:hover {
            border-color: var(--aqua-teal);
            background: rgba(102, 126, 234, 0.05);
        }

        .upload-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: var(--aqua-teal);
        }

        .file-info {
            margin-top: 1rem;
            padding: 1rem;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 8px;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        
        .upload-area details {
            max-width: 100%;
            overflow: hidden;
        }
        
        .upload-area details ul {
            text-align: left;
        }

        /* Venue List */
        .venue-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: var(--light-gray);
            border-radius: 8px;
            margin-bottom: 0.75rem;
            transition: all 0.3s;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }

        .venue-item:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .venue-name {
            font-weight: 600;
            color: var(--deep-black);
            word-wrap: break-word;
            overflow-wrap: break-word;
        }

        .venue-details {
            font-size: 0.85rem;
            color: var(--dark-gray);
            margin-top: 0.25rem;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }

        .venue-actions {
            display: flex;
            gap: 0.5rem;
            flex-shrink: 0;
        }

        /* Combinations List */
        .combination-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem 1rem;
            background: var(--light-gray);
            border-radius: 8px;
            margin-bottom: 0.5rem;
            word-wrap: break-word;
            overflow-wrap: break-word;
            gap: 1rem;
        }

        .combination-badge {
            display: inline-block;
            padding: 0.35rem 0.75rem;
            border-radius: 6px;
            font-size: 0.85rem;
            font-weight: 500;
            color: white;
            word-wrap: break-word;
            overflow-wrap: break-word;
            white-space: normal;
        }

        /* Seating Grid */
        .seating-grid {
            display: grid;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .seat {
            aspect-ratio: 1;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            padding: 0.25rem;
            text-align: center;
            transition: all 0.3s;
            cursor: pointer;
            position: relative;
        }

        .seat:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 10;
        }

        .seat.occupied {
            color: white;
            font-weight: 500;
        }

        .seat.disabled {
            background: repeating-linear-gradient(
                45deg,
                #f0f0f0,
                #f0f0f0 10px,
                #e0e0e0 10px,
                #e0e0e0 20px
            );
            cursor: not-allowed;
            opacity: 0.5;
        }

        .seat.disabled:hover {
            transform: none;
            box-shadow: none;
        }

        .student-name {
            font-weight: 600;
            margin-bottom: 2px;
        }

        .student-info {
            font-size: 0.7rem;
            opacity: 0.9;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            overflow-x: hidden;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        
        .modal-content table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }
        
        .modal-content p {
            word-wrap: break-word;
            overflow-wrap: break-word;
        }

        @keyframes slideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .close {
            color: var(--dark-gray);
            float: right;
            font-size: 2rem;
            font-weight: 300;
            line-height: 1;
            cursor: pointer;
            transition: color 0.3s;
        }

        .close:hover {
            color: var(--deep-black);
        }

        /* Info Text */
        .info-text {
            color: var(--dark-gray);
            font-style: italic;
            text-align: center;
            padding: 2rem;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: var(--dark-gray);
        }

        .empty-state p {
            font-size: 1.1rem;
        }

        /* Seating Info Bar */
        .seating-info {
            background: linear-gradient(135deg, var(--aqua-teal) 0%, #764ba2 100%);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            display: none;
        }

        .seating-info.active {
            display: block;
        }

        .seating-stats {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .stat-item {
            text-align: center;
        }

        .stat-value {
            font-size: 1.8rem;
            font-weight: 700;
            display: block;
        }

        .stat-label {
            font-size: 0.85rem;
            opacity: 0.9;
        }

        /* Checkbox Styles */
        .checkbox-group {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem;
            background: var(--light-gray);
            border-radius: 8px;
            transition: all 0.3s;
        }

        .checkbox-item:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .checkbox-item input[type="checkbox"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .checkbox-item label {
            margin: 0;
            cursor: pointer;
            flex: 1;
        }

        /* Zone Badge */
        .zone-badge {
            display: inline-block;
            padding: 0.25rem 0.65rem;
            background: var(--aqua-teal);
            color: white;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        /* Prevention List */
        .prevention-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            background: var(--light-gray);
            border-radius: 8px;
            margin-bottom: 0.5rem;
        }

        /* Session Tabs */
        .session-tabs {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }

        .session-tab {
            padding: 0.65rem 1.2rem;
            background: var(--light-gray);
            border: 2px solid transparent;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 500;
        }

        .session-tab:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .session-tab.active {
            background: var(--aqua-teal);
            color: white;
            border-color: var(--aqua-teal);
        }

        /* Venue Priority */
        .priority-item {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            background: var(--light-gray);
            border-radius: 8px;
            margin-bottom: 0.5rem;
        }

        .priority-number {
            width: 30px;
            height: 30px;
            background: var(--aqua-teal);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 1rem;
        }

        .priority-controls {
            margin-left: auto;
            display: flex;
            gap: 0.5rem;
        }

        /* Action Buttons */
        .action-btn {
            padding: 0.4rem 0.8rem;
            font-size: 0.85rem;
            border-radius: 6px;
        }

        /* NEW: Allocation Settings Styles */
        .allocation-settings {
            background: var(--light-gray);
            padding: 1.5rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
        }

        .allocation-title {
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--deep-black);
        }

        .allocation-options {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .allocation-option {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .allocation-option input[type="checkbox"] {
            width: 18px;
            height: 18px;
        }

        .allocation-option label {
            margin: 0;
            font-weight: 400;
        }

        /* NEW: Open Planner Button */
        .btn-open-planner {
            background: linear-gradient(135deg, var(--success-green) 0%, #229954 100%);
            color: white;
            font-size: 1.1rem;
            padding: 0.85rem 1.8rem;
            box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
        }

        .btn-open-planner:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .two-col-grid,
            .three-col-grid {
                grid-template-columns: 1fr;
            }

            .app-header {
                flex-direction: column;
                gap: 1rem;
            }

            .header-right {
                align-items: center;
            }

            .seating-stats {
                flex-direction: column;
            }
            
            .modal-content {
                width: 95%;
                padding: 1rem;
                margin: 10% auto;
            }
        }
        
        /* Details/Summary styles */
        details {
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        
        details summary {
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        
        details ul {
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        
        details li {
            word-wrap: break-word;
            overflow-wrap: break-word;
            margin-bottom: 0.5rem;
        }

        /* Print Styles */
        @media print {
            .app-header,
            .card-header button,
            .btn,
            .no-print {
                display: none !important;
            }

            body {
                background: white;
            }

            .card {
                box-shadow: none;
                page-break-inside: avoid;
            }

            .seating-grid {
                gap: 2px;
            }

            .seat {
                border: 1px solid #000;
                font-size: 8pt;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="app-header">
        <div class="header-content">
            <h1>📝 Exam Seating Plan Generator</h1>
            <p class="subtitle">Advanced venue management & seating arrangement system</p>
        </div>
        <div class="header-right">
            <div class="user-badge" id="userEmail">Loading...</div>
            <a href="index.html" class="btn-home">🏠 Home</a>
        </div>
    </header>

    <!-- Main Container -->
    <div class="container">
        <!-- Session Tabs -->
        <div id="sessionTabs" class="session-tabs">
            <!-- Dynamically populated -->
        </div>

        <!-- Current Session Info -->
        <div id="currentSessionInfo" class="card" style="display:none;">
            <div class="card-header">
                <h3 class="card-title">📅 Current Session</h3>
            </div>
            <div id="sessionDetails"></div>
        </div>

        <!-- File Upload -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">1️⃣ Upload Student Data</h3>
            </div>
            <div class="upload-area">
                <div class="upload-icon">📤</div>
                <p><strong>Choose Excel file or drag and drop</strong></p>
                <p style="font-size: 0.9rem; color: var(--dark-gray); margin-top: 0.5rem;">
                    Required columns: Student Number, Surname, Name, Grade, Class, Subject
                </p>
                <details style="margin-top: 1rem; text-align: left; padding: 1rem; background: rgba(102, 126, 234, 0.05); border-radius: 8px;">
                    <summary style="cursor: pointer; font-weight: 500; color: var(--aqua-teal);">
                        📋 Column Name Guide (Click to expand)
                    </summary>
                    <div style="margin-top: 0.75rem; font-size: 0.85rem; line-height: 1.8;">
                        <p><strong>The app will automatically recognize these column variations:</strong></p>
                        <ul style="margin-left: 1.5rem; margin-top: 0.5rem;">
                            <li><strong>Student Number:</strong> "Student Number", "Student No", "ID", "Number"</li>
                            <li><strong>Surname:</strong> "Surname", "Last Name", "LastName"</li>
                            <li><strong>Name:</strong> "Name", "First Name", "FirstName", "Given Name"</li>
                            <li><strong>Grade:</strong> "Grade", "Level", "Year"</li>
                            <li><strong>Class:</strong> "Class", "Group", "Section"</li>
                            <li><strong>Subject:</strong> "Subject", "Course", "Module"</li>
                        </ul>
                        <p style="margin-top: 0.75rem; font-style: italic; color: var(--dark-gray);">
                            ℹ️ Column names are case-insensitive and flexible
                        </p>
                    </div>
                </details>
                <input type="file" id="fileInput" accept=".xlsx,.xls" style="display:none;">
                <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()" style="margin-top: 1rem;">
                    📁 Select File
                </button>
            </div>
            <div class="file-info" id="fileInfo" style="display:none;">
                <p><strong>📄 File:</strong> <span id="fileName"></span></p>
                <p id="studentCount"></p>
                <div style="display: flex; gap: 0.5rem; margin-top: 1rem; flex-wrap: wrap;">
                    <button class="btn btn-success" id="uploadBtn" style="display:none;">✅ Confirm Upload</button>
                    <button class="btn btn-secondary" id="debugBtn" style="display:none;" onclick="showDebugInfo()">
                        🔍 View Detected Data
                    </button>
                </div>
            </div>
        </div>

        <!-- Exam Session Configuration -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">2️⃣ Configure Exam Session</h3>
                <button class="btn btn-primary" onclick="createNewSession()">➕ New Session</button>
            </div>
            <div class="two-col-grid">
                <div class="form-group">
                    <label for="examDate">📅 Exam Date</label>
                    <input type="date" id="examDate">
                </div>
                <div class="form-group">
                    <label for="examName">📝 Exam Name/Period</label>
                    <input type="text" id="examName" placeholder="e.g., June Exams 2024">
                </div>
            </div>
            <button class="btn btn-success" onclick="saveCurrentSession()">💾 Save Session</button>
        </div>

        <!-- Grade & Subject Selection -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">3️⃣ Select Grade & Subject Combinations</h3>
            </div>
            <div class="three-col-grid">
                <div class="form-group">
                    <label for="gradeSelect">Grade</label>
                    <select id="gradeSelect">
                        <option value="">Select grade</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="classSelect">Class (Optional)</label>
                    <select id="classSelect">
                        <option value="">All classes</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="subjectSelect">Subject</label>
                    <select id="subjectSelect">
                        <option value="">Select subject</option>
                    </select>
                </div>
            </div>
            <button class="btn btn-primary" onclick="addCombination()">➕ Add Combination</button>
            
            <div style="margin-top: 1.5rem;">
                <h4 style="margin-bottom: 0.75rem;">Selected Combinations:</h4>
                <div id="combinationsList">
                    <p class="info-text">No combinations selected</p>
                </div>
            </div>
        </div>

        <!-- NEW: Allocation Settings -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">4️⃣ Allocation Settings</h3>
            </div>
            <div class="allocation-settings">
                <div class="allocation-title">🔤 Student Arrangement Order</div>
                <p style="font-size: 0.9rem; color: var(--dark-gray); margin-bottom: 1rem;">
                    Students will be arranged in the following order:
                </p>
                <div class="allocation-options">
                    <div class="allocation-option">
                        <input type="checkbox" id="sortByGrade" checked disabled>
                        <label for="sortByGrade">1. Grade (Primary grouping)</label>
                    </div>
                    <div class="allocation-option">
                        <input type="checkbox" id="sortBySubject" checked disabled>
                        <label for="sortBySubject">2. Subject (Within grade)</label>
                    </div>
                    <div class="allocation-option">
                        <input type="checkbox" id="sortByClass" checked>
                        <label for="sortByClass">3. Class (Within subject) - Optional</label>
                    </div>
                    <div class="allocation-option">
                        <input type="checkbox" id="sortBySurname" checked>
                        <label for="sortBySurname">4. Surname (Alphabetical order) - Recommended</label>
                    </div>
                </div>
                <p style="font-size: 0.85rem; color: var(--dark-gray); margin-top: 1rem; font-style: italic;">
                    ℹ️ Example: Grade 10 Tourism students in class E1 will be placed together and sorted alphabetically by surname.
                </p>
            </div>
        </div>

        <!-- Venue Management -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">5️⃣ Venue Management</h3>
                <button class="btn btn-primary" onclick="openVenueModal()">➕ Add Venue</button>
            </div>
            <div id="venueList">
                <p class="info-text">No venues created yet</p>
            </div>
        </div>

        <!-- Venue Selection -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">6️⃣ Select Venues for This Session</h3>
            </div>
            <div id="venueCheckboxes" class="checkbox-group">
                <p class="info-text">Create venues to see selection options</p>
            </div>
            
            <div id="venuePrioritySection" style="margin-top: 1.5rem; display: none;">
                <h4 style="margin-bottom: 0.75rem;">Venue Fill Priority:</h4>
                <p style="font-size: 0.9rem; color: var(--dark-gray); margin-bottom: 1rem;">
                    Drag to reorder venues (students will be placed in this order)
                </p>
                <div id="venuePriorityList"></div>
            </div>
        </div>

        <!-- Student Proximity Prevention -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">7️⃣ Prevent Student Proximity (Optional)</h3>
                <button class="btn btn-secondary" onclick="openPreventionModal()">➕ Add Prevention</button>
            </div>
            <div id="preventionList">
                <p class="info-text">No proximity restrictions set</p>
            </div>
        </div>

        <!-- Generate Seating Plan -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">8️⃣ Generate & Manage Seating Plan</h3>
            </div>
            
            <div class="form-group">
                <label for="spacingOption">🪑 Seating Arrangement:</label>
                <select id="spacingOption">
                    <option value="skip-seat">Skip Every Other Seat (Checkerboard)</option>
                    <option value="skip-row">Skip Every Other Row</option>
                    <option value="normal" selected>Normal (Fill All Seats Row by Row)</option>
                </select>
            </div>

            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                <button class="btn btn-primary" onclick="generateSeatingPlan()">🎲 Generate Plan</button>
                <button class="btn btn-open-planner" onclick="openSeatingPlannerWindow()" id="btnOpenPlanner" style="display: none;">
                    🪟 Open Seating Planner Window
                </button>
                <button class="btn btn-warning" onclick="exportToPDF()">📄 Export to PDF</button>
                <button class="btn btn-secondary" onclick="exportToExcel()">📊 Export to Excel</button>
            </div>
        </div>

        <!-- Seating Plan Preview -->
        <div class="card" id="seatingPreviewCard" style="display: none;">
            <div class="card-header">
                <h3 class="card-title">📊 Seating Plan Preview</h3>
            </div>
            <div id="seatingInfo" class="seating-info">
                <div class="seating-stats">
                    <div class="stat-item">
                        <span class="stat-value" id="totalStudents">0</span>
                        <span class="stat-label">Total Students</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value" id="seatedStudents">0</span>
                        <span class="stat-label">Seated</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value" id="remainingStudents">0</span>
                        <span class="stat-label">Remaining</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value" id="totalSeats">0</span>
                        <span class="stat-label">Total Seats</span>
                    </div>
                </div>
            </div>
            <div id="seatingGrid">
                <div class="empty-state">
                    <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                </div>
            </div>
        </div>

        <!-- Data Management -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">⚙️ Data Management</h3>
            </div>
            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                <button class="btn btn-secondary" onclick="exportData()">💾 Export All Data</button>
                <button class="btn btn-secondary" onclick="importData()">📥 Import Data</button>
                <button class="btn btn-warning" onclick="clearStudentsOnly()">🗑️ Clear Students Only</button>
                <button class="btn btn-danger" onclick="clearAllData()">⚠️ Clear All Data</button>
            </div>
        </div>
    </div>

    <!-- Venue Modal -->
    <div id="venueModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeVenueModal()">&times;</span>
            <h2>Add New Venue</h2>
            <div class="form-group">
                <label for="venueName">Venue Name</label>
                <input type="text" id="venueName" placeholder="e.g., Hall A">
            </div>
            <div class="two-col-grid">
                <div class="form-group">
                    <label for="venueRows">Number of Rows</label>
                    <input type="number" id="venueRows" min="1" value="10">
                </div>
                <div class="form-group">
                    <label for="venueCols">Seats per Row</label>
                    <input type="number" id="venueCols" min="1" value="10">
                </div>
            </div>
            <button class="btn btn-primary" onclick="addVenue()">✅ Add Venue</button>
        </div>
    </div>

    <!-- Prevention Modal -->
    <div id="preventionModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closePreventionModal()">&times;</span>
            <h2>Prevent Student Proximity</h2>
            <div class="form-group">
                <label for="student1Number">First Student Number</label>
                <input type="text" id="student1Number" placeholder="Enter student number">
            </div>
            <div class="form-group">
                <label for="student2Number">Second Student Number</label>
                <input type="text" id="student2Number" placeholder="Enter student number">
            </div>
            <button class="btn btn-primary" onclick="addPrevention()">✅ Add Prevention</button>
        </div>
    </div>

    <!-- Generic Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <p id="modalMessage"></p>
        </div>
    </div>

    <script>
        // Global Variables
        let students = [];
        let venues = [];
        let currentSeatingPlan = null;
        let selectedCombinations = [];
        let preventedPairs = [];
        let venueZones = {};
        let venueSeatMap = {};
        let selectedVenues = [];
        let venuePriority = [];
        let gradeSubjectColorMap = {}; // NEW: Changed from gradeColorMap to gradeSubjectColorMap
        let pendingStudents = [];
        let examSessions = {};
        let currentSessionId = null;
        let seatingPlannerWindow = null; // NEW: Reference to the planner window

        // Color palette for grade-subject combinations
        const colorPalette = [
            '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8',
            '#F7DC6F', '#BB8FCE', '#85C1E2', '#F8B739', '#52B788',
            '#E07A5F', '#81B29A', '#F2CC8F', '#E63946', '#A8DADC',
            '#F4A460', '#9370DB', '#20B2AA', '#FFB6C1', '#87CEEB',
            '#FF7F50', '#BA55D3', '#48D1CC', '#F0E68C', '#DDA0DD',
            '#B0E0E6', '#FFDAB9', '#EE82EE', '#40E0D0', '#FFE4B5'
        ];

        // Initialize
        window.onload = async function() {
            console.log('Page loaded, waiting for Firebase...');
            
            // Display user email once authenticated
            if (window.currentFirebaseUser) {
                document.getElementById('userEmail').textContent = window.currentFirebaseUser.email;
            }
            
            window.addEventListener('firebaseReady', () => {
                console.log('Firebase ready event received');
                document.getElementById('userEmail').textContent = window.currentFirebaseUser.email;
                loadFromLocalStorage();
                loadExamSessions();
            });

            // If Firebase is already ready
            if (window.firebaseReady) {
                console.log('Firebase already ready');
                document.getElementById('userEmail').textContent = window.currentFirebaseUser.email;
                loadFromLocalStorage();
                loadExamSessions();
            }
        };

        // File Upload Handler
        document.getElementById('fileInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) {
                showModal('No file selected');
                return;
            }
            
            // Check file type
            const fileName = file.name.toLowerCase();
            if (!fileName.endsWith('.xlsx') && !fileName.endsWith('.xls')) {
                showModal('❌ Please select an Excel file (.xlsx or .xls)');
                document.getElementById('fileInput').value = '';
                return;
            }
            
            // Show loading state
            document.getElementById('fileName').textContent = `Loading ${file.name}...`;
            document.getElementById('fileInfo').style.display = 'block';
            document.getElementById('studentCount').textContent = '⏳ Processing file...';
            
            const reader = new FileReader();
            
            reader.onerror = function() {
                showModal('❌ Error reading file. Please try again.');
                document.getElementById('fileInfo').style.display = 'none';
            };
            
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, {type: 'array'});
                    
                    if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
                        showModal('❌ No sheets found in the Excel file');
                        document.getElementById('fileInfo').style.display = 'none';
                        return;
                    }
                    
                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(firstSheet);
                    
                    if (jsonData.length === 0) {
                        showModal('❌ No data found in the Excel file. Please check the file format.');
                        document.getElementById('fileInfo').style.display = 'none';
                        return;
                    }
                    
                    // Debug: Show available columns
                    console.log('Available columns:', Object.keys(jsonData[0]));
                    console.log('First row sample:', jsonData[0]);
                    
                    // Map the data with flexible column name matching
                    students = jsonData.map((row, index) => {
                        // Find column names (case-insensitive and with variations)
                        const findColumn = (variations) => {
                            for (let key in row) {
                                const normalizedKey = key.toLowerCase().trim();
                                if (variations.some(v => normalizedKey.includes(v.toLowerCase()))) {
                                    return row[key];
                                }
                            }
                            return '';
                        };
                        
                        return {
                            studentNumber: String(findColumn(['Student Number', 'Student No', 'StudentNumber', 'ID', 'Number']) || ''),
                            surname: String(findColumn(['Surname', 'Last Name', 'LastName']) || ''),
                            name: String(findColumn(['Name', 'First Name', 'FirstName', 'Given Name']) || ''),
                            grade: String(findColumn(['Grade', 'Level', 'Year']) || ''),
                            class: String(findColumn(['Class', 'Group', 'Section']) || ''),
                            subject: String(findColumn(['Subject', 'Course', 'Module']) || '')
                        };
                    });
                    
                    // Filter out completely empty rows
                    students = students.filter(s => 
                        s.studentNumber || s.surname || s.name || s.grade || s.subject
                    );
                    
                    if (students.length === 0) {
                        showModal('❌ No valid student data found. Please ensure your Excel file has columns: Student Number, Surname, Name, Grade, Class, Subject');
                        document.getElementById('fileInfo').style.display = 'none';
                        return;
                    }
                    
                    // Check if required fields are present
                    const missingFields = students.filter(s => 
                        !s.studentNumber || !s.surname || !s.grade || !s.subject
                    );
                    
                    if (missingFields.length > 0) {
                        console.warn(`${missingFields.length} students have missing required fields`);
                    }
                    
                    // Success!
                    document.getElementById('fileName').textContent = file.name;
                    document.getElementById('studentCount').textContent = 
                        `✅ ${students.length} students loaded successfully!`;
                    document.getElementById('uploadBtn').style.display = 'inline-block';
                    document.getElementById('debugBtn').style.display = 'inline-block';
                    
                    updateSubjectGradeSelector();
                    saveToLocalStorage();
                    
                    showModal(`✅ Successfully loaded ${students.length} students from ${file.name}`);
                    
                } catch (error) {
                    console.error('Error parsing Excel file:', error);
                    showModal(`❌ Error parsing file: ${error.message}. Please ensure it's a valid Excel file with the correct format.`);
                    document.getElementById('fileInfo').style.display = 'none';
                }
            };
            
            reader.readAsArrayBuffer(file);
        });

        // Update Subject & Grade Selector
        function updateSubjectGradeSelector() {
            const grades = [...new Set(students.map(s => s.grade))].sort();
            const classes = [...new Set(students.map(s => s.class))].filter(c => c).sort();
            const subjects = [...new Set(students.map(s => s.subject))].sort();
            
            const gradeSelect = document.getElementById('gradeSelect');
            const classSelect = document.getElementById('classSelect');
            const subjectSelect = document.getElementById('subjectSelect');
            
            gradeSelect.innerHTML = '<option value="">Select grade</option>';
            classSelect.innerHTML = '<option value="">All classes</option>';
            subjectSelect.innerHTML = '<option value="">Select subject</option>';
            
            grades.forEach(grade => {
                gradeSelect.innerHTML += `<option value="${grade}">${grade}</option>`;
            });
            
            classes.forEach(cls => {
                classSelect.innerHTML += `<option value="${cls}">${cls}</option>`;
            });
            
            subjects.forEach(subject => {
                subjectSelect.innerHTML += `<option value="${subject}">${subject}</option>`;
            });
        }

        // Update Student Count Display
        function updateStudentCount() {
            if (students.length > 0) {
                document.getElementById('fileName').textContent = 'Student data loaded';
                document.getElementById('fileInfo').style.display = 'block';
                document.getElementById('studentCount').textContent = 
                    `✅ ${students.length} students loaded`;
            }
        }

        // Add Combination
        function addCombination() {
            const grade = document.getElementById('gradeSelect').value;
            const cls = document.getElementById('classSelect').value;
            const subject = document.getElementById('subjectSelect').value;
            
            if (!grade || !subject) {
                showModal('Please select both grade and subject');
                return;
            }
            
            const combination = {
                grade: grade,
                class: cls || 'All',
                subject: subject,
                id: `${grade}-${cls || 'All'}-${subject}` // NEW: Unique ID per grade-subject-class
            };
            
            // Check if combination already exists
            const exists = selectedCombinations.some(c => c.id === combination.id);
            if (exists) {
                showModal('This combination is already added');
                return;
            }
            
            selectedCombinations.push(combination);
            
            // NEW: Assign unique color to this grade-subject combination
            if (!gradeSubjectColorMap[combination.id]) {
                const colorIndex = Object.keys(gradeSubjectColorMap).length % colorPalette.length;
                gradeSubjectColorMap[combination.id] = colorPalette[colorIndex];
            }
            
            updateCombinationsList();
            saveToLocalStorage();
            
            // Reset selectors
            document.getElementById('gradeSelect').value = '';
            document.getElementById('classSelect').value = '';
            document.getElementById('subjectSelect').value = '';
        }

        // Update Combinations List
        function updateCombinationsList() {
            const list = document.getElementById('combinationsList');
            
            if (selectedCombinations.length === 0) {
                list.innerHTML = '<p class="info-text">No combinations selected</p>';
                return;
            }
            
            list.innerHTML = selectedCombinations.map((combo, index) => {
                const color = gradeSubjectColorMap[combo.id] || '#999';
                return `
                    <div class="combination-item">
                        <div>
                            <span class="combination-badge" style="background: ${color};">
                                ${combo.grade} - ${combo.class} - ${combo.subject}
                            </span>
                        </div>
                        <button class="btn btn-danger action-btn" onclick="removeCombination(${index})">
                            🗑️ Remove
                        </button>
                    </div>
                `;
            }).join('');
        }

        // Remove Combination
        function removeCombination(index) {
            const combo = selectedCombinations[index];
            selectedCombinations.splice(index, 1);
            
            // Optionally remove color mapping if no longer used
            const stillUsed = selectedCombinations.some(c => c.id === combo.id);
            if (!stillUsed) {
                delete gradeSubjectColorMap[combo.id];
            }
            
            updateCombinationsList();
            saveToLocalStorage();
        }

        // Venue Management
        function openVenueModal() {
            document.getElementById('venueModal').style.display = 'block';
        }

        function closeVenueModal() {
            document.getElementById('venueModal').style.display = 'none';
            document.getElementById('venueName').value = '';
            document.getElementById('venueRows').value = '10';
            document.getElementById('venueCols').value = '10';
        }

        function addVenue() {
            const name = document.getElementById('venueName').value.trim();
            const rows = parseInt(document.getElementById('venueRows').value);
            const cols = parseInt(document.getElementById('venueCols').value);
            
            if (!name || rows < 1 || cols < 1) {
                showModal('Please fill in all fields correctly');
                return;
            }
            
            const venue = {
                id: Date.now().toString(),
                name: name,
                rows: rows,
                cols: cols,
                totalSeats: rows * cols
            };
            
            venues.push(venue);
            initializeVenueSeatMap(venue.id, rows, cols);
            
            updateVenueList();
            updateVenueCheckboxes();
            saveToLocalStorage();
            closeVenueModal();
            
            showModal(`Venue "${name}" added successfully!`);
        }

        function initializeVenueSeatMap(venueId, rows, cols) {
            venueSeatMap[venueId] = [];
            for (let r = 0; r < rows; r++) {
                const row = [];
                for (let c = 0; c < cols; c++) {
                    row.push({ disabled: false, assigned: false });
                }
                venueSeatMap[venueId].push(row);
            }
        }

        function updateVenueList() {
            const list = document.getElementById('venueList');
            
            if (venues.length === 0) {
                list.innerHTML = '<p class="info-text">No venues created yet</p>';
                return;
            }
            
            list.innerHTML = venues.map(venue => `
                <div class="venue-item">
                    <div>
                        <div class="venue-name">${venue.name}</div>
                        <div class="venue-details">
                            ${venue.rows} rows × ${venue.cols} seats = ${venue.totalSeats} total seats
                        </div>
                    </div>
                    <div class="venue-actions">
                        <button class="btn btn-secondary action-btn" onclick="configureVenueSeats('${venue.id}')">
                            ⚙️ Configure
                        </button>
                        <button class="btn btn-danger action-btn" onclick="deleteVenue('${venue.id}')">
                            🗑️ Delete
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function updateVenueCheckboxes() {
            const container = document.getElementById('venueCheckboxes');
            
            if (venues.length === 0) {
                container.innerHTML = '<p class="info-text">Create venues to see selection options</p>';
                document.getElementById('venuePrioritySection').style.display = 'none';
                return;
            }
            
            container.innerHTML = venues.map(venue => `
                <div class="checkbox-item">
                    <input type="checkbox" id="venue_${venue.id}" value="${venue.id}" 
                           ${selectedVenues.includes(venue.id) ? 'checked' : ''}
                           onchange="toggleVenueSelection('${venue.id}')">
                    <label for="venue_${venue.id}">${venue.name} (${venue.totalSeats} seats)</label>
                </div>
            `).join('');
            
            if (selectedVenues.length > 0) {
                document.getElementById('venuePrioritySection').style.display = 'block';
                updateVenuePriorityDisplay();
            } else {
                document.getElementById('venuePrioritySection').style.display = 'none';
            }
        }

        function toggleVenueSelection(venueId) {
            const index = selectedVenues.indexOf(venueId);
            if (index > -1) {
                selectedVenues.splice(index, 1);
                const priorityIndex = venuePriority.indexOf(venueId);
                if (priorityIndex > -1) {
                    venuePriority.splice(priorityIndex, 1);
                }
            } else {
                selectedVenues.push(venueId);
                if (!venuePriority.includes(venueId)) {
                    venuePriority.push(venueId);
                }
            }
            
            updateVenueCheckboxes();
            saveToLocalStorage();
        }

        function updateVenuePriorityDisplay() {
            const container = document.getElementById('venuePriorityList');
            
            container.innerHTML = venuePriority.map((venueId, index) => {
                const venue = venues.find(v => v.id === venueId);
                if (!venue) return '';
                
                return `
                    <div class="priority-item">
                        <div class="priority-number">${index + 1}</div>
                        <div style="flex: 1;">${venue.name}</div>
                        <div class="priority-controls">
                            <button class="btn btn-secondary action-btn" 
                                    onclick="moveVenuePriority(${index}, -1)"
                                    ${index === 0 ? 'disabled' : ''}>
                                ⬆️
                            </button>
                            <button class="btn btn-secondary action-btn" 
                                    onclick="moveVenuePriority(${index}, 1)"
                                    ${index === venuePriority.length - 1 ? 'disabled' : ''}>
                                ⬇️
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function moveVenuePriority(index, direction) {
            const newIndex = index + direction;
            if (newIndex < 0 || newIndex >= venuePriority.length) return;
            
            [venuePriority[index], venuePriority[newIndex]] = 
            [venuePriority[newIndex], venuePriority[index]];
            
            updateVenuePriorityDisplay();
            saveToLocalStorage();
        }

        function deleteVenue(venueId) {
            if (confirm('Are you sure you want to delete this venue?')) {
                venues = venues.filter(v => v.id !== venueId);
                selectedVenues = selectedVenues.filter(v => v !== venueId);
                venuePriority = venuePriority.filter(v => v !== venueId);
                delete venueSeatMap[venueId];
                delete venueZones[venueId];
                
                updateVenueList();
                updateVenueCheckboxes();
                updateZoneList();
                saveToLocalStorage();
                
                showModal('Venue deleted successfully');
            }
        }

        function configureVenueSeats(venueId) {
            // Open seat configuration modal
            showModal('Seat configuration feature coming in next update!');
        }

        // Prevention Management
        function openPreventionModal() {
            document.getElementById('preventionModal').style.display = 'block';
        }

        function closePreventionModal() {
            document.getElementById('preventionModal').style.display = 'none';
            document.getElementById('student1Number').value = '';
            document.getElementById('student2Number').value = '';
        }

        function addPrevention() {
            const student1 = document.getElementById('student1Number').value.trim();
            const student2 = document.getElementById('student2Number').value.trim();
            
            if (!student1 || !student2) {
                showModal('Please enter both student numbers');
                return;
            }
            
            if (student1 === student2) {
                showModal('Cannot prevent a student from sitting next to themselves');
                return;
            }
            
            const exists = preventedPairs.some(p => 
                (p.student1 === student1 && p.student2 === student2) ||
                (p.student1 === student2 && p.student2 === student1)
            );
            
            if (exists) {
                showModal('This prevention already exists');
                return;
            }
            
            preventedPairs.push({ student1, student2 });
            updatePreventionList();
            saveToLocalStorage();
            closePreventionModal();
            
            showModal('Prevention added successfully');
        }

        function updatePreventionList() {
            const list = document.getElementById('preventionList');
            
            if (preventedPairs.length === 0) {
                list.innerHTML = '<p class="info-text">No proximity restrictions set</p>';
                return;
            }
            
            list.innerHTML = preventedPairs.map((pair, index) => `
                <div class="prevention-item">
                    <span>${pair.student1} ⚠️ ${pair.student2}</span>
                    <button class="btn btn-danger action-btn" onclick="removePrevention(${index})">
                        🗑️ Remove
                    </button>
                </div>
            `).join('');
        }

        function removePrevention(index) {
            preventedPairs.splice(index, 1);
            updatePreventionList();
            saveToLocalStorage();
        }

        // NEW: Generate Seating Plan with Alphabetical Sorting
        function generateSeatingPlan() {
            if (students.length === 0) {
                showModal('Please upload student data first');
                return;
            }
            
            if (selectedCombinations.length === 0) {
                showModal('Please select at least one grade/subject combination');
                return;
            }
            
            if (selectedVenues.length === 0) {
                showModal('Please select at least one venue');
                return;
            }
            
            // Get sorting preferences
            const sortByClass = document.getElementById('sortByClass').checked;
            const sortBySurname = document.getElementById('sortBySurname').checked;
            
            // Filter and sort students based on selected combinations
            let filteredStudents = [];
            
            selectedCombinations.forEach(combo => {
                let studentsForCombo = students.filter(s => {
                    const gradeMatch = s.grade === combo.grade;
                    const subjectMatch = s.subject === combo.subject;
                    const classMatch = combo.class === 'All' || s.class === combo.class;
                    
                    return gradeMatch && subjectMatch && classMatch;
                });
                
                // Sort students within this combination
                if (sortBySurname) {
                    studentsForCombo.sort((a, b) => {
                        // First sort by class if enabled
                        if (sortByClass) {
                            const classCompare = a.class.localeCompare(b.class);
                            if (classCompare !== 0) return classCompare;
                        }
                        // Then sort by surname
                        return a.surname.localeCompare(b.surname);
                    });
                }
                
                // Add combination ID to each student for color mapping
                studentsForCombo = studentsForCombo.map(s => ({
                    ...s,
                    combinationId: combo.id
                }));
                
                filteredStudents = filteredStudents.concat(studentsForCombo);
            });
            
            if (filteredStudents.length === 0) {
                showModal('No students match the selected combinations');
                return;
            }
            
            // Calculate total available seats
            let totalAvailableSeats = 0;
            selectedVenues.forEach(venueId => {
                const venue = venues.find(v => v.id === venueId);
                if (venue && venueSeatMap[venueId]) {
                    venueSeatMap[venueId].forEach(row => {
                        row.forEach(seat => {
                            if (!seat.disabled) totalAvailableSeats++;
                        });
                    });
                }
            });
            
            const spacingOption = document.getElementById('spacingOption').value;
            
            // Adjust available seats based on spacing
            let effectiveSeats = totalAvailableSeats;
            if (spacingOption === 'skip-seat') {
                effectiveSeats = Math.floor(totalAvailableSeats / 2);
            } else if (spacingOption === 'skip-row') {
                effectiveSeats = Math.floor(totalAvailableSeats / 2);
            }
            
            if (filteredStudents.length > effectiveSeats) {
                const overflow = filteredStudents.length - effectiveSeats;
                showModal(`⚠️ Warning: ${overflow} students won't fit with current spacing. Consider adding more venues or changing spacing option.`);
            }
            
            // Generate the seating arrangement
            currentSeatingPlan = assignStudentsToSeats(filteredStudents, spacingOption);
            pendingStudents = filteredStudents.slice(currentSeatingPlan.seated.length);
            
            // Store in current session if available
            if (currentSessionId && examSessions[currentSessionId]) {
                examSessions[currentSessionId].seatingPlan = currentSeatingPlan;
                examSessions[currentSessionId].combinations = selectedCombinations;
                examSessions[currentSessionId].pendingStudents = pendingStudents;
                saveExamSessions();
            }
            
            // Show preview and enable open planner button
            displaySeatingPreview();
            document.getElementById('btnOpenPlanner').style.display = 'inline-flex';
            
            saveToLocalStorage();
            showModal(`✅ Seating plan generated! ${currentSeatingPlan.seated.length} students seated, ${pendingStudents.length} remaining.`);
        }

        // NEW: Assign Students to Seats (Row by Row)
        function assignStudentsToSeats(studentList, spacingOption) {
            const seatingArrangement = {
                venues: {},
                seated: [],
                timestamp: new Date().toISOString()
            };
            
            let studentIndex = 0;
            
            // Process venues in priority order
            for (const venueId of venuePriority) {
                if (studentIndex >= studentList.length) break;
                
                const venue = venues.find(v => v.id === venueId);
                if (!venue || !venueSeatMap[venueId]) continue;
                
                const venueSeating = [];
                const seatMap = venueSeatMap[venueId];
                
                // Fill row by row
                for (let r = 0; r < venue.rows; r++) {
                    // Check if we should skip this row
                    if (spacingOption === 'skip-row' && r % 2 === 1) {
                        venueSeating.push(seatMap[r].map(() => null));
                        continue;
                    }
                    
                    const row = [];
                    for (let c = 0; c < venue.cols; c++) {
                        // Check if seat is disabled
                        if (seatMap[r][c].disabled) {
                            row.push(null);
                            continue;
                        }
                        
                        // Check if we should skip this seat
                        if (spacingOption === 'skip-seat' && (r + c) % 2 === 1) {
                            row.push(null);
                            continue;
                        }
                        
                        // Assign student if available
                        if (studentIndex < studentList.length) {
                            const student = studentList[studentIndex];
                            
                            // Check proximity prevention
                            const canPlace = checkProximity(venueSeating, r, c, student);
                            
                            if (canPlace) {
                                row.push(student);
                                seatingArrangement.seated.push({
                                    ...student,
                                    venue: venue.name,
                                    row: r + 1,
                                    seat: c + 1
                                });
                                studentIndex++;
                            } else {
                                row.push(null);
                            }
                        } else {
                            row.push(null);
                        }
                    }
                    venueSeating.push(row);
                }
                
                seatingArrangement.venues[venueId] = {
                    name: venue.name,
                    seating: venueSeating
                };
            }
            
            return seatingArrangement;
        }

        // Check Proximity Prevention
        function checkProximity(venueSeating, row, col, student) {
            const adjacentPositions = [
                [row - 1, col], [row + 1, col],
                [row, col - 1], [row, col + 1],
                [row - 1, col - 1], [row - 1, col + 1],
                [row + 1, col - 1], [row + 1, col + 1]
            ];
            
            for (const [r, c] of adjacentPositions) {
                if (r >= 0 && r < venueSeating.length && c >= 0 && c < venueSeating[0].length) {
                    const adjacentStudent = venueSeating[r][c];
                    if (adjacentStudent) {
                        const isPrevented = preventedPairs.some(pair => 
                            (pair.student1 === student.studentNumber && pair.student2 === adjacentStudent.studentNumber) ||
                            (pair.student1 === adjacentStudent.studentNumber && pair.student2 === student.studentNumber)
                        );
                        if (isPrevented) return false;
                    }
                }
            }
            return true;
        }

        // Display Seating Preview
        function displaySeatingPreview() {
            const previewCard = document.getElementById('seatingPreviewCard');
            const infoBar = document.getElementById('seatingInfo');
            const grid = document.getElementById('seatingGrid');
            
            previewCard.style.display = 'block';
            infoBar.classList.add('active');
            
            // Update stats
            document.getElementById('totalStudents').textContent = 
                currentSeatingPlan.seated.length + pendingStudents.length;
            document.getElementById('seatedStudents').textContent = 
                currentSeatingPlan.seated.length;
            document.getElementById('remainingStudents').textContent = 
                pendingStudents.length;
            
            let totalSeats = 0;
            selectedVenues.forEach(venueId => {
                const venue = venues.find(v => v.id === venueId);
                if (venue) totalSeats += venue.totalSeats;
            });
            document.getElementById('totalSeats').textContent = totalSeats;
            
            // Display preview text
            grid.innerHTML = `
                <div class="empty-state">
                    <p>📊 Seating plan generated successfully!</p>
                    <p>Click "Open Seating Planner Window" to view and edit the full seating arrangement.</p>
                </div>
            `;
        }

        // NEW: Open Seating Planner in Separate Window
        function openSeatingPlannerWindow() {
            if (!currentSeatingPlan) {
                showModal('Please generate a seating plan first');
                return;
            }
            
            // Check if window is already open
            if (seatingPlannerWindow && !seatingPlannerWindow.closed) {
                seatingPlannerWindow.focus();
                return;
            }
            
            // Open new window
            seatingPlannerWindow = window.open('', 'SeatingPlanner', 'width=1400,height=900');
            
            // Build the window content
            const windowContent = buildSeatingPlannerHTML();
            seatingPlannerWindow.document.write(windowContent);
            seatingPlannerWindow.document.close();
            
            // Setup message communication
            setupWindowCommunication();
        }

        // NEW: Build Seating Planner HTML
        function buildSeatingPlannerHTML() {
            let venuesHTML = '';
            
            Object.keys(currentSeatingPlan.venues).forEach(venueId => {
                const venueData = currentSeatingPlan.venues[venueId];
                const venue = venues.find(v => v.id === venueId);
                
                let seatingHTML = '';
                venueData.seating.forEach((row, r) => {
                    row.forEach((student, c) => {
                        if (student) {
                            const color = gradeSubjectColorMap[student.combinationId] || '#999';
                            seatingHTML += `
                                <div class="seat occupied" style="background: ${color};" 
                                     data-venue="${venueId}" data-row="${r}" data-col="${c}"
                                     draggable="true" ondragstart="handleDragStart(event)" ondragover="handleDragOver(event)" ondrop="handleDrop(event)">
                                    <div class="student-name">${student.surname}</div>
                                    <div class="student-info">${student.name}</div>
                                    <div class="student-info">${student.grade} - ${student.subject}</div>
                                </div>
                            `;
                        } else {
                            seatingHTML += `
                                <div class="seat" data-venue="${venueId}" data-row="${r}" data-col="${c}"
                                     ondragover="handleDragOver(event)" ondrop="handleDrop(event)">
                                </div>
                            `;
                        }
                    });
                });
                
                venuesHTML += `
                    <div class="venue-section">
                        <h3>🏛️ ${venueData.name}</h3>
                        <div class="seating-grid" style="grid-template-columns: repeat(${venue.cols}, 1fr);">
                            ${seatingHTML}
                        </div>
                    </div>
                `;
            });
            
            return `
<!DOCTYPE html>
<html>
<head>
    <title>Seating Planner - ${examSessions[currentSessionId]?.examName || 'Session'}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 2rem;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .header h1 { font-size: 1.8rem; }
        .btn {
            padding: 0.6rem 1.2rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s;
        }
        .btn-primary {
            background: rgba(255,255,255,0.2);
            color: white;
        }
        .btn-primary:hover {
            background: rgba(255,255,255,0.3);
        }
        .venue-section {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }
        .venue-section h3 {
            margin-bottom: 1rem;
            color: #667eea;
        }
        .seating-grid {
            display: grid;
            gap: 0.5rem;
        }
        .seat {
            aspect-ratio: 1;
            border: 2px solid #E0E0E0;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            padding: 0.25rem;
            text-align: center;
            transition: all 0.3s;
            cursor: move;
        }
        .seat:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10;
        }
        .seat.occupied {
            color: white;
            font-weight: 500;
        }
        .seat.drag-over {
            border: 3px dashed #667eea;
            background: rgba(102, 126, 234, 0.1);
        }
        .student-name { font-weight: 600; margin-bottom: 2px; }
        .student-info { font-size: 0.7rem; opacity: 0.9; }
        .legend {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 2rem;
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
        }
        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .legend-color {
            width: 24px;
            height: 24px;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🪟 Seating Planner</h1>
        <button class="btn btn-primary" onclick="savePlan()">💾 Save Plan</button>
    </div>
    
    <div class="legend">
        ${Object.keys(gradeSubjectColorMap).map(comboId => {
            const combo = selectedCombinations.find(c => c.id === comboId);
            const color = gradeSubjectColorMap[comboId];
            return `
                <div class="legend-item">
                    <div class="legend-color" style="background: ${color};"></div>
                    <span>${combo ? `${combo.grade} - ${combo.subject}` : comboId}</span>
                </div>
            `;
        }).join('')}
    </div>
    
    ${venuesHTML}
    
    <script>
        let draggedElement = null;
        let draggedData = null;
        
        function handleDragStart(e) {
            draggedElement = e.target;
            draggedData = {
                venue: e.target.dataset.venue,
                row: e.target.dataset.row,
                col: e.target.dataset.col
            };
            e.target.style.opacity = '0.5';
        }
        
        function handleDragOver(e) {
            e.preventDefault();
            e.target.classList.add('drag-over');
        }
        
        function handleDrop(e) {
            e.preventDefault();
            e.target.classList.remove('drag-over');
            
            if (e.target.classList.contains('seat') && draggedElement) {
                // Swap content
                const targetContent = e.target.innerHTML;
                const draggedContent = draggedElement.innerHTML;
                
                e.target.innerHTML = draggedContent;
                draggedElement.innerHTML = targetContent;
                
                // Swap classes
                const targetClasses = e.target.className;
                const draggedClasses = draggedElement.className;
                
                e.target.className = draggedClasses;
                draggedElement.className = targetClasses;
                
                // Update data attributes
                const targetData = {
                    venue: e.target.dataset.venue,
                    row: e.target.dataset.row,
                    col: e.target.dataset.col
                };
                
                e.target.dataset.venue = draggedData.venue;
                e.target.dataset.row = draggedData.row;
                e.target.dataset.col = draggedData.col;
                
                draggedElement.dataset.venue = targetData.venue;
                draggedElement.dataset.row = targetData.row;
                draggedElement.dataset.col = targetData.col;
            }
            
            draggedElement.style.opacity = '1';
            draggedElement = null;
        }
        
        function savePlan() {
            // Send updated plan back to main window
            if (window.opener && !window.opener.closed) {
                const updatedPlan = collectCurrentSeating();
                window.opener.postMessage({ type: 'savePlan', plan: updatedPlan }, '*');
                alert('✅ Seating plan saved successfully!');
            } else {
                alert('❌ Cannot save - main window is closed');
            }
        }
        
        function collectCurrentSeating() {
            // Collect current seating arrangement from DOM
            const plan = { venues: {}, seated: [] };
            
            document.querySelectorAll('.venue-section').forEach(venueSection => {
                const seats = venueSection.querySelectorAll('.seat');
                // ... collect data from seats
            });
            
            return plan;
        }
        
        // Prevent accidental window close
        window.onbeforeunload = function() {
            return 'Are you sure you want to close? Unsaved changes will be lost.';
        };
    <\/script>
</body>
</html>
            `;
        }

        // NEW: Setup Window Communication
        function setupWindowCommunication() {
            window.addEventListener('message', function(event) {
                if (event.data.type === 'savePlan') {
                    currentSeatingPlan = event.data.plan;
                    if (currentSessionId && examSessions[currentSessionId]) {
                        examSessions[currentSessionId].seatingPlan = currentSeatingPlan;
                        saveExamSessions();
                    }
                    saveToLocalStorage();
                    showModal('✅ Seating plan saved from planner window!');
                }
            });
        }

        // Export Functions
        function exportToPDF() {
            if (!currentSeatingPlan) {
                showModal('Please generate a seating plan first');
                return;
            }
            showModal('PDF export coming soon!');
        }

        function exportToExcel() {
            if (!currentSeatingPlan) {
                showModal('Please generate a seating plan first');
                return;
            }
            
            const wb = XLSX.utils.book_new();
            const wsData = [];
            
            // Header
            wsData.push(['Venue', 'Row', 'Seat', 'Student Number', 'Surname', 'Name', 'Grade', 'Class', 'Subject']);
            
            // Data
            currentSeatingPlan.seated.forEach(s => {
                wsData.push([
                    s.venue,
                    s.row,
                    s.seat,
                    s.studentNumber,
                    s.surname,
                    s.name,
                    s.grade,
                    s.class,
                    s.subject
                ]);
            });
            
            const ws = XLSX.utils.aoa_to_sheet(wsData);
            XLSX.utils.book_append_sheet(wb, ws, 'Seating Plan');
            
            XLSX.writeFile(wb, `Seating_Plan_${new Date().toISOString().split('T')[0]}.xlsx`);
        }

        function exportData() {
            const data = {
                students,
                venues,
                selectedCombinations,
                preventedPairs,
                venueZones,
                venueSeatMap,
                selectedVenues,
                venuePriority,
                gradeSubjectColorMap,
                examSessions,
                currentSessionId
            };
            
            const json = JSON.stringify(data, null, 2);
            const blob = new Blob([json], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `seating_data_${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
        }

        function importData() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        try {
                            const data = JSON.parse(e.target.result);
                            
                            students = data.students || [];
                            venues = data.venues || [];
                            selectedCombinations = data.selectedCombinations || [];
                            preventedPairs = data.preventedPairs || [];
                            venueZones = data.venueZones || {};
                            venueSeatMap = data.venueSeatMap || {};
                            selectedVenues = data.selectedVenues || [];
                            venuePriority = data.venuePriority || [];
                            gradeSubjectColorMap = data.gradeSubjectColorMap || {};
                            examSessions = data.examSessions || {};
                            currentSessionId = data.currentSessionId || null;
                            
                            saveToLocalStorage();
                            saveExamSessions();
                            
                            updateUI();
                            updateStudentCount();
                            updateSubjectGradeSelector();
                            updateSessionTabs();
                            updateCurrentSessionDisplay();
                            
                            showModal('Data imported successfully!');
                        } catch (error) {
                            showModal('Error importing data: ' + error.message);
                        }
                    };
                    reader.readAsText(file);
                }
            };
            input.click();
        }

        // Session Management
        function createNewSession() {
            const sessionId = Date.now().toString();
            const sessionName = prompt('Enter session name:');
            
            if (!sessionName) return;
            
            examSessions[sessionId] = {
                id: sessionId,
                examName: sessionName,
                examDate: '',
                seatingPlan: null,
                combinations: [],
                created: new Date().toISOString()
            };
            
            currentSessionId = sessionId;
            saveExamSessions();
            updateSessionTabs();
            updateCurrentSessionDisplay();
            
            showModal('New session created!');
        }

        function saveCurrentSession() {
            if (!currentSessionId) {
                createNewSession();
                return;
            }
            
            const examDate = document.getElementById('examDate').value;
            const examName = document.getElementById('examName').value;
            
            if (!examDate || !examName) {
                showModal('Please fill in exam date and name');
                return;
            }
            
            examSessions[currentSessionId].examDate = examDate;
            examSessions[currentSessionId].examName = examName;
            examSessions[currentSessionId].combinations = selectedCombinations;
            examSessions[currentSessionId].seatingPlan = currentSeatingPlan;
            
            saveExamSessions();
            updateSessionTabs();
            updateCurrentSessionDisplay();
            
            showModal('Session saved successfully!');
        }

        function loadSession(sessionId) {
            const session = examSessions[sessionId];
            if (!session) return;
            
            currentSessionId = sessionId;
            
            document.getElementById('examDate').value = session.examDate || '';
            document.getElementById('examName').value = session.examName || '';
            
            selectedCombinations = session.combinations || [];
            currentSeatingPlan = session.seatingPlan || null;
            pendingStudents = session.pendingStudents || [];
            
            updateCombinationsList();
            updateSessionTabs();
            updateCurrentSessionDisplay();
            
            if (currentSeatingPlan) {
                displaySeatingPreview();
                document.getElementById('btnOpenPlanner').style.display = 'inline-flex';
            }
        }

        function updateSessionTabs() {
            const container = document.getElementById('sessionTabs');
            
            if (Object.keys(examSessions).length === 0) {
                container.innerHTML = '';
                return;
            }
            
            container.innerHTML = Object.values(examSessions).map(session => `
                <div class="session-tab ${session.id === currentSessionId ? 'active' : ''}" 
                     onclick="loadSession('${session.id}')">
                    ${session.examName} (${session.examDate || 'No date'})
                </div>
            `).join('');
        }

        function updateCurrentSessionDisplay() {
            const card = document.getElementById('currentSessionInfo');
            const details = document.getElementById('sessionDetails');
            
            if (!currentSessionId || !examSessions[currentSessionId]) {
                card.style.display = 'none';
                return;
            }
            
            const session = examSessions[currentSessionId];
            card.style.display = 'block';
            
            details.innerHTML = `
                <p><strong>Session:</strong> ${session.examName}</p>
                <p><strong>Date:</strong> ${session.examDate || 'Not set'}</p>
                <p><strong>Combinations:</strong> ${session.combinations?.length || 0}</p>
                <p><strong>Status:</strong> ${session.seatingPlan ? '✅ Plan Generated' : '⏳ Pending'}</p>
            `;
        }

        async function saveExamSessions() {
            localStorage.setItem('examSessions', JSON.stringify(examSessions));
            localStorage.setItem('currentSessionId', currentSessionId || '');
            
            if (window.firebaseReady && window.saveToFirebase) {
                await window.saveToFirebase('seating_plan', {
                    examSessions,
                    currentSessionId
                });
            }
        }

        async function loadExamSessions() {
            const savedSessions = localStorage.getItem('examSessions');
            const savedCurrentId = localStorage.getItem('currentSessionId');
            
            if (savedSessions) {
                examSessions = JSON.parse(savedSessions);
                currentSessionId = savedCurrentId || null;
                updateSessionTabs();
                updateCurrentSessionDisplay();
            }
            
            if (window.firebaseReady && window.loadFromFirebase) {
                const firebaseData = await window.loadFromFirebase('seating_plan');
                if (firebaseData) {
                    examSessions = firebaseData.examSessions || {};
                    currentSessionId = firebaseData.currentSessionId || null;
                    updateSessionTabs();
                    updateCurrentSessionDisplay();
                }
            }
        }

        function saveCurrentSessionState() {
            if (!currentSessionId || !examSessions[currentSessionId]) return;
            
            examSessions[currentSessionId].combinations = selectedCombinations;
            examSessions[currentSessionId].seatingPlan = currentSeatingPlan;
            examSessions[currentSessionId].pendingStudents = pendingStudents;
            
            saveExamSessions();
        }

        // Zone Management (placeholder)
        function updateZoneList() {
            // Placeholder for zone management
        }

        // Clear Data Functions
        function clearStudentsOnly() {
            if (confirm('This will clear all student data but keep your venue configurations and settings. Continue?')) {
                students = [];
                selectedCombinations = [];
                currentSeatingPlan = null;
                pendingStudents = [];
                gradeSubjectColorMap = {};
                preventedPairs = [];
                
                Object.values(examSessions).forEach(session => {
                    session.seatingPlan = null;
                    session.combinations = [];
                });
                
                saveToLocalStorage();
                saveExamSessions();
                
                document.getElementById('fileName').textContent = 'No file selected';
                document.getElementById('studentCount').textContent = '';
                document.getElementById('uploadBtn').style.display = 'none';
                document.getElementById('gradeSelect').innerHTML = '<option value="">Select grade</option>';
                document.getElementById('subjectSelect').innerHTML = '<option value="">Select subject</option>';
                document.getElementById('combinationsList').innerHTML = 
                    '<p class="info-text">No combinations selected</p>';
                document.getElementById('seatingGrid').innerHTML = `
                    <div class="empty-state">
                        <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                    </div>
                `;
                document.getElementById('seatingInfo').classList.remove('active');
                document.getElementById('seatingPreviewCard').style.display = 'none';
                document.getElementById('btnOpenPlanner').style.display = 'none';
                
                updatePreventionList();
                
                showModal('Student data cleared successfully! Your venue configurations and settings have been preserved.');
            }
        }

        function clearAllData() {
            if (confirm('This will clear all data including students, venues, sessions, and settings. Continue?')) {
                students = [];
                venues = [];
                currentSeatingPlan = null;
                selectedCombinations = [];
                pendingStudents = [];
                preventedPairs = [];
                venueZones = {};
                venueSeatMap = {};
                selectedVenues = [];
                venuePriority = [];
                examSessions = {};
                currentSessionId = null;
                gradeSubjectColorMap = {};
                
                localStorage.clear();
                
                document.getElementById('fileName').textContent = 'No file selected';
                document.getElementById('studentCount').textContent = '';
                document.getElementById('uploadBtn').style.display = 'none';
                document.getElementById('examDate').value = '';
                document.getElementById('examName').value = '';
                document.getElementById('gradeSelect').innerHTML = '<option value="">Select grade</option>';
                document.getElementById('subjectSelect').innerHTML = '<option value="">Select subject</option>';
                document.getElementById('combinationsList').innerHTML = 
                    '<p class="info-text">No combinations selected</p>';
                document.getElementById('venueList').innerHTML = 
                    '<p class="info-text">No venues created yet</p>';
                document.getElementById('venueCheckboxes').innerHTML = 
                    '<p class="info-text">Create venues to see selection options</p>';
                document.getElementById('venuePrioritySection').style.display = 'none';
                document.getElementById('seatingGrid').innerHTML = `
                    <div class="empty-state">
                        <p>👆 Configure options and click "Generate Plan" to create seating arrangement</p>
                    </div>
                `;
                document.getElementById('seatingInfo').classList.remove('active');
                document.getElementById('seatingPreviewCard').style.display = 'none';
                document.getElementById('btnOpenPlanner').style.display = 'none';
                
                updatePreventionList();
                updateZoneList();
                updateSessionTabs();
                updateCurrentSessionDisplay();
                
                showModal('All data cleared successfully!');
            }
        }

        // Debug Function
        function showDebugInfo() {
            if (students.length === 0) {
                showModal('No student data loaded');
                return;
            }
            
            // Create a detailed view of the first 5 students
            const sampleSize = Math.min(5, students.length);
            const sampleData = students.slice(0, sampleSize);
            
            let debugHTML = `
                <div style="text-align: left;">
                    <h3 style="margin-bottom: 1rem;">📊 Detected Student Data</h3>
                    <p style="margin-bottom: 1rem; color: var(--dark-gray);">
                        Showing first ${sampleSize} of ${students.length} students
                    </p>
                    <div style="overflow-x: auto; max-width: 100%;">
                        <table style="width: 100%; border-collapse: collapse; margin-top: 1rem; font-size: 0.85rem; min-width: 600px;">
                            <thead>
                                <tr style="background: var(--aqua-teal); color: white;">
                                    <th style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">Student #</th>
                                    <th style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">Surname</th>
                                    <th style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">Name</th>
                                    <th style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">Grade</th>
                                    <th style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">Class</th>
                                    <th style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">Subject</th>
                                </tr>
                            </thead>
                            <tbody>
            `;
            
            sampleData.forEach(student => {
                debugHTML += `
                    <tr>
                        <td style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">${student.studentNumber || '<span style="color: red;">❌ Missing</span>'}</td>
                        <td style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">${student.surname || '<span style="color: red;">❌ Missing</span>'}</td>
                        <td style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">${student.name || '<span style="color: red;">❌ Missing</span>'}</td>
                        <td style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">${student.grade || '<span style="color: red;">❌ Missing</span>'}</td>
                        <td style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">${student.class || '<span style="color: orange;">⚠️ Optional</span>'}</td>
                        <td style="padding: 0.5rem; border: 1px solid #ddd; white-space: nowrap;">${student.subject || '<span style="color: red;">❌ Missing</span>'}</td>
                    </tr>
                `;
            });
            
            debugHTML += `
                            </tbody>
                        </table>
                    </div>
                    <div style="margin-top: 1rem; padding: 1rem; background: #f0f0f0; border-radius: 8px;">
                        <p style="color: var(--dark-gray); font-size: 0.85rem; margin-bottom: 0.5rem;">
                            <strong>ℹ️ Key:</strong>
                        </p>
                        <ul style="font-size: 0.85rem; color: var(--dark-gray); margin-left: 1.5rem;">
                            <li><span style="color: red;">❌ Missing</span> = Required field not detected</li>
                            <li><span style="color: orange;">⚠️ Optional</span> = Field is optional</li>
                            <li>If you see missing required fields, check your Excel column names</li>
                        </ul>
                    </div>
                </div>
            `;
            
            // Show in modal
            document.getElementById('modalMessage').innerHTML = debugHTML;
            document.getElementById('modal').style.display = 'block';
        }

        // Enhanced Local Storage
        async function saveToLocalStorage() {
            localStorage.setItem('students', JSON.stringify(students));
            localStorage.setItem('venues', JSON.stringify(venues));
            localStorage.setItem('selectedCombinations', JSON.stringify(selectedCombinations));
            localStorage.setItem('preventedPairs', JSON.stringify(preventedPairs));
            localStorage.setItem('venueZones', JSON.stringify(venueZones));
            localStorage.setItem('venueSeatMap', JSON.stringify(venueSeatMap));
            localStorage.setItem('selectedVenues', JSON.stringify(selectedVenues));
            localStorage.setItem('venuePriority', JSON.stringify(venuePriority));
            localStorage.setItem('gradeSubjectColorMap', JSON.stringify(gradeSubjectColorMap));
            
            if (window.firebaseReady && window.saveToFirebase) {
                try {
                    await window.saveToFirebase('seating_plan', {
                        examSessions,
                        currentSessionId
                    });
                } catch (error) {
                    console.error('Error saving to Firebase:', error);
                }
            }
        }

        function loadFromLocalStorage() {
            const savedStudents = localStorage.getItem('students');
            const savedVenues = localStorage.getItem('venues');
            const savedCombinations = localStorage.getItem('selectedCombinations');
            const savedPairs = localStorage.getItem('preventedPairs');
            const savedZones = localStorage.getItem('venueZones');
            const savedSeatMap = localStorage.getItem('venueSeatMap');
            const savedSelectedVenues = localStorage.getItem('selectedVenues');
            const savedVenuePriority = localStorage.getItem('venuePriority');
            const savedColorMap = localStorage.getItem('gradeSubjectColorMap');
            
            if (savedStudents) {
                students = JSON.parse(savedStudents);
                updateStudentCount();
                updateSubjectGradeSelector();
            }
            
            if (savedVenues) {
                venues = JSON.parse(savedVenues);
                updateVenueList();
                updateVenueCheckboxes();
                
                venues.forEach(venue => {
                    if (!venueSeatMap[venue.id]) {
                        initializeVenueSeatMap(venue.id, venue.rows, venue.cols);
                    }
                });
            }
            
            if (savedCombinations) {
                selectedCombinations = JSON.parse(savedCombinations);
                updateCombinationsList();
            }
            
            if (savedPairs) {
                preventedPairs = JSON.parse(savedPairs);
                updatePreventionList();
            }
            
            if (savedZones) {
                venueZones = JSON.parse(savedZones);
                updateZoneList();
            }
            
            if (savedSeatMap) {
                venueSeatMap = JSON.parse(savedSeatMap);
            }
            
            if (savedSelectedVenues) {
                selectedVenues = JSON.parse(savedSelectedVenues);
                updateVenueCheckboxes();
            }
            
            if (savedVenuePriority) {
                venuePriority = JSON.parse(savedVenuePriority);
                updateVenuePriorityDisplay();
            }
            
            if (savedColorMap) {
                gradeSubjectColorMap = JSON.parse(savedColorMap);
            }
        }

        // Update UI
        function updateUI() {
            updateVenueList();
            updateVenueCheckboxes();
            updatePreventionList();
            updateZoneList();
            updateCurrentSessionDisplay();
        }

        // Modal Functions
        function showModal(message) {
            const modalMessage = document.getElementById('modalMessage');
            // Check if message is HTML or plain text
            if (message.includes('<')) {
                modalMessage.innerHTML = message;
            } else {
                modalMessage.textContent = message;
            }
            document.getElementById('modal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('modal').style.display = 'none';
            // Reset to text content
            document.getElementById('modalMessage').textContent = '';
        }

        // Click outside modal to close
        window.onclick = function(event) {
            const modal = document.getElementById('modal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Auto-save current session periodically
        setInterval(() => {
            if (currentSessionId && examSessions[currentSessionId]) {
                saveCurrentSessionState();
            }
        }, 30000); // Every 30 seconds
    </script>
</body>
</html>
